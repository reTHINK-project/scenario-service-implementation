{"version":3,"sources":["../src/TempSensor.js"],"names":[],"mappings":"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","file":"TempSensor.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport ds18b20 from \"ds18b20\";\nimport logger from \"logops\";\nimport async from \"async\";\nimport util from './Util';\n\n\nclass TempSensor {\n\n    constructor(client, refreshInterval = 5000) {\n        this._client = client;\n        this._refreshInterval = refreshInterval;\n    }\n\n    get sensors() {\n        return this._sensors;\n    }\n\n    start() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (!that._client || typeof that._client === \"undefined\") { //TODO: Check if client is initialised\n                reject(new Error(\"lwm2m-client object not set\"));\n            }\n            else {\n                //Get sensors\n                ds18b20.sensors((error, ids) => {\n                    if (error) {\n                        reject(error);\n                    }\n                    else {\n                        if (typeof ids === \"undefined\" || ids.length === 0) {\n                            reject(new Error(\"No temperature sensor/s found!\"));\n                        }\n\n                        logger.debug(\"Found sensor/s!\", ids);\n                        this._sensors = ids;\n\n                        //For each sensor, create client object for lwm2m\n                        var index = 0;\n                        var errors = [];\n                        async.each(ids, (id, callback) => {\n                            util.createClientObject(\"/3303/\" + index)\n                                .catch(reject)\n                                .then(() => {\n                                    return util.setClientResource(that._client, \"/3303/\" + index, 5701, \"Cel\"); //Set temperature object unit\n                                })\n                                .catch((error) => {\n                                    if (error) {\n                                        errors.push(error);\n                                    }\n                                })\n                                .then((result) => {\n                                    logger.debug(\"Set unit\", result);\n                                    index++;\n                                    callback();\n                                });\n                        }, () => { //When all sensor-objects have been created\n\n                            //Initial temperature-read\n                            that._setClientTemp(that);\n                            //Start timer for updating sensor-object with temperature-values\n                            that._timer = setInterval(that._setClientTemp, that._refreshInterval, that);\n\n                            if (errors.length > 0) {\n                                reject(errors);\n                            }\n                            else {\n                                resolve();\n                            }\n                        });\n                    }\n                })\n            }\n        });\n    }\n\n    stop() {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n    }\n\n    _setClientTemp(that) {\n        var index = 0;\n        var errors = [];\n\n        async.each(that._sensors, (id, callback) => {\n            ds18b20.temperature(id, (error, value) => {\n                if (error) {\n                    logger.error(error);\n                    errors.push(error);\n                }\n                else {\n                    logger.debug(\"Sensor '\" + id + \"': \" + value);\n                    logger.debug(\"Setting values in lwm2m-client\");\n\n                    Promise.all([\n                            util.setClientResource(that._client, \"/3303/\" + index, 5700, value)\n                        ])\n                        .then((results) => {\n                            logger.debug(\"Set values\", results);\n                            index++;\n                            callback();\n                        }, (error) => {\n                            if (error) {\n                                errors.push(error);\n                            }\n                            index++;\n                            callback();\n                        });\n                }\n            });\n        }, () => {\n            if (errors.length > 0) {\n                logger.error(\"Error/s while storing temperature!\", errors);\n            }\n        });\n    }\n}\n\nexport default TempSensor;"]}