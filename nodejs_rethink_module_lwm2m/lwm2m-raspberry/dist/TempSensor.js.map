{
  "version": 3,
  "sources": [
    "../src/TempSensor.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "TempSensor.js",
  "sourcesContent": [
    "/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport ds18b20 from \"ds18b20\";\nimport logger from \"logops\";\nimport async from \"async\";\n\n\nclass TempSensor {\n\n    constructor(client, refreshInterval = 5000) {\n        this._client = client;\n        this._refreshInterval = refreshInterval;\n    }\n\n    get sensors() {\n        return this._sensors;\n    }\n\n    start() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (!that._client || typeof that._client === \"undefined\") { //TODO: Check if client is initialised\n                reject(new Error(\"lwm2m-client object not set\"));\n            }\n            else {\n                //Get sensors\n                ds18b20.sensors((error, ids) => {\n                    if (error) {\n                        reject(error);\n                    }\n                    else {\n                        if (typeof ids === \"undefined\" || ids.length === 0) {\n                            reject(new Error(\"No temperature sensor/s found!\"));\n                        }\n\n                        logger.debug(\"Found sensor/s!\", ids);\n                        this._sensors = ids;\n\n                        //For each sensor, create client object for lwm2m\n                        var index = 0;\n                        var errors = [];\n                        async.each(ids, (id, callback) => {\n                            that._client.registry.create(\"/3303/\" + index, (error) => {\n                                if (error) {\n                                    errors.push(error);\n                                }\n                                index++;\n                                callback();\n                            });\n                        }, () => { //When all sensor-objects have been created\n\n                            //Initial temperature-read\n                            that._setClientTemp(that);\n                            //Start timer for updating sensor-object with temperature-values\n                            that._timer = setInterval(that._setClientTemp, that._refreshInterval, that);\n\n\n                            if (errors.length > 0) {\n                                reject(errors);\n                            }\n                            else {\n                                resolve();\n                            }\n                        });\n                    }\n                })\n            }\n        });\n    }\n\n    stop() {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n    }\n\n    _setClientTemp(that) {\n        //Query values\n        //Set values (according to ipso spec)\n        var index = 0;\n        var errors = [];\n\n        async.each(that._sensors, (id, callback) => {\n            ds18b20.temperature(id, (error, value) => {\n                if (error) {\n                    logger.error(error);\n                    errors.push(error);\n                }\n                else {\n                    logger.debug(\"Sensor '\" + id + \"': \" + value);\n                    logger.debug(\"Setting values in lwm2m-client\");\n\n                    //TODO: Set other fields needed (unit etc.)\n\n                    that._client.registry.setResource(\"/3303/\" + index, 5700, value, (error, result) => {\n                        if (error) {\n                            errors.push(error);\n                        }\n                        else {\n                            logger.debug(\"Set\", result);\n                        }\n                        index++;\n                        callback();\n                    });\n                }\n            });\n        }, () => {\n            if (errors.length > 0) {\n                logger.error(\"Error/s while storing temperature!\", errors);\n            }\n        });\n    }\n}\n\nexport default TempSensor;"
  ]
}