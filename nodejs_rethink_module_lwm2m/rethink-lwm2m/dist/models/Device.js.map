{"version":3,"sources":["../../src/models/Device.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;;;;;;AACA;;;;;;AAEA,IAAI,SAAS,mBAAS,MAAtB;AACA,IAAI,SAAS,EAAb;;AAEA,OAAO,MAAP,GAAgB,IAAI,MAAJ,CAAW;AACvB,UAAM,EAAC,MAAM,MAAP,EAAe,QAAQ,IAAvB,EADiB;AAEvB,UAAM,EAAC,MAAM,OAAO,KAAP,CAAa,QAApB,EAA8B,KAAK,MAAnC,EAFiB;;AAIvB,kBAAc;AACV,oBAAY,EAAC,MAAM,OAAP,EAAgB,SAAS,KAAzB,EADF;AAEV,mBAAW,EAAC,MAAM,IAAP,EAAa,SAAS,KAAK,GAA3B,EAFD;AAGV,iBAAS;AAHC,KAJS;AASvB,gBAAY;AACR,qBAAa,CACT;AACI,gBAAI,MADR;AAEI,mBAAO,MAFX;AAGI,kBAAM,MAHV;AAII,uBAAW,EAAC,MAAM,IAAP,EAAa,SAAS,KAAK,GAA3B;AAJf,SADS,CADL;AASR,kBAAU,CACN;AACI,gBAAI,MADR;AAEI,mBAAO,MAFX;AAGI,kBAAM,MAHV;AAII,uBAAW,EAAC,MAAM,IAAP,EAAa,SAAS,KAAK,GAA3B;AAJf,SADM,CATF;AAiBR,eAAO,CACH;AACI,gBAAI,MADR;AAEI,kBAAM,OAFV;AAGI,oBAAQ,MAHZ;AAII,mBAAO;AACH,uBAAO;AACH,uBAAG,MADA;AAEH,uBAAG;AAFA,iBADJ;AAKH,sBAAM;AALH,aAJX;AAWI,uBAAW,EAAC,MAAM,IAAP,EAAa,SAAS,KAAK,GAA3B;AAXf,SADG,CAjBC;AAgCR,cAAM,CACF;AACI,iBAAK,MADT;AAEI,mBAAO,MAFX;AAGI,uBAAW,EAAC,MAAM,IAAP,EAAa,SAAS,KAAK,GAA3B;AAHf,SADE;AAhCE;AATW,CAAX,CAAhB;;AAmDA,OAAO,IAAP,GAAc,UAAC,UAAD,EAAgB;AAC1B,WAAO,KAAP,GAAe,WAAW,KAAX,CAAiB,QAAjB,EAA2B,OAAO,MAAlC,CAAf;AACH,CAFD;;kBAIe,M","file":"Device.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\nimport mongoose from \"mongoose\";\n\nvar Schema = mongoose.Schema;\nvar device = {};\n\ndevice.schema = new Schema({\n    name: {type: String, unique: true},\n    room: {type: Schema.Types.ObjectId, ref: 'Room'},\n\n    registration: {\n        registered: {type: Boolean, default: false},\n        timestamp: {type: Date, default: Date.now},\n        payload: String\n    },\n    lastValues: {\n        temperature: [\n            {\n                id: String,\n                value: Number,\n                unit: String,\n                timestamp: {type: Date, default: Date.now}\n            }\n        ],\n        humidity: [\n            {\n                id: String,\n                value: Number,\n                unit: String,\n                timestamp: {type: Date, default: Date.now}\n            }\n        ],\n        light: [\n            {\n                id: String,\n                isOn: Boolean,\n                dimmer: Number,\n                color: {\n                    value: {\n                        x: Number,\n                        y: Number\n                    },\n                    unit: String\n                },\n                timestamp: {type: Date, default: Date.now}\n            }\n        ],\n        misc: [\n            {\n                uri: String,\n                value: String,\n                timestamp: {type: Date, default: Date.now}\n            }\n        ]\n    }\n});\n\ndevice.load = (connection) => {\n    device.model = connection.model('Device', device.schema);\n};\n\nexport default device;"]}