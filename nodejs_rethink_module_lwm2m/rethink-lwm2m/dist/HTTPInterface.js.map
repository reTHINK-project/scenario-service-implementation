{"version":3,"sources":["../src/HTTPInterface.js"],"names":["interfaceError","Object","freeze","invalidJSON","invalidHTTPMethod","writeFail","database","unsupportedParam","unknown","coapToHTTP","HTTPInterface","host","port","keyFile","certFile","lwm2m","_host","_port","_keyFile","_certFile","_database","_lwm2m","_server","Promise","resolve","reject","Error","options","readFile","catch","then","key","cert","params","that","reply","data","error","objectType","objectName","hasOwnProperty","mode","room","device","_getErrorReply","getObject","queriedObject","value","JSON","stringify","httpCode","_write","deviceName","objectId","resourceType","code","ids","getAttrId","readOnly","write","objectTypeId","resourceTypeId","createServer","req","res","head","method","debug","headers","writeHead","end","body","bodyValid","on","connection","remoteAddress","parse","e","_processRequest","result","errorCode","Array","listen","_opened","_getCertFiles","_listen","all","close","errorType","msg","json"],"mappings":"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","file":"HTTPInterface.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport https from \"https\";\nimport logger from \"logops\";\nimport util from \"./Util\";\nimport mapping from \"./lwm2m-mapping\";\n\nlet interfaceError = Object.freeze({\n    invalidJSON: \"Invalid JSON-String\",\n    invalidHTTPMethod: \"HTTP-Method not supported\",\n    writeFail: \"LWM2M-write failed\",\n    database: \"Database error\",\n    unsupportedParam: \"Unsupported parameter\",\n    unknown: \"Unknown\"\n});\n\n\n//HTTP-to-CoAP Mapping (https://tools.ietf.org/html/draft-ietf-core-http-mapping-10#section-7)\nlet coapToHTTP = Object.freeze({\n    \"2.01\": 201, \"2.02\": 200, \"2.03\": 200, \"2.04\": 200, \"2.05\": 200, \"4.00\": 400, \"4.01\": 403, \"4.02\": 500, \"4.03\": 403,\n    \"4.04\": 404, \"4.05\": 400, \"4.06\": 406, \"4.12\": 412, \"4.13\": 413, \"4.15\": 415, \"5.00\": 500, \"5.01\": 501, \"5.02\": 502,\n    \"5.03\": 503, \"5.04\": 504, \"5.05\": 502\n});\n\nclass HTTPInterface {\n\n    constructor(host, port, keyFile, certFile, database, lwm2m) {\n        this._host = host;\n        this._port = port;\n        this._keyFile = keyFile;\n        this._certFile = certFile;\n        this._database = database;\n        this._lwm2m = lwm2m;\n        this._server = {};\n    }\n\n    _getCertFiles(keyFile, certFile) {\n        return new Promise((resolve, reject) => {\n            if (typeof keyFile === \"undefined\" || typeof certFile === \"undefined\") {\n                reject(new Error(\"Invalid path to cert-files!\"));\n            }\n            else {\n                var options = {};\n                util.readFile(keyFile)\n                    .catch(reject)\n                    .then((key) => {\n                        options.key = key;\n                        return util.readFile(certFile);\n                    })\n                    .catch(reject)\n                    .then((cert) => {\n                        options.cert = cert;\n                        resolve(options);\n                    });\n            }\n        });\n    }\n\n    static _getErrorReply(errorType, msg) {\n        var json = {};\n\n        //1st param (error type from enum interfaceError)\n        for (var key in interfaceError) {\n            if (interfaceError.hasOwnProperty(key) && errorType === interfaceError[key]) {\n                json.error = interfaceError[key];\n            }\n        }\n        if (typeof json.error === \"undefined\" || json.error === null) { //Invalid value for param 'error'\n            json.error = interfaceError.unknown;\n        }\n        //2nd param (custom message)\n        if (typeof msg !== \"undefined\" && msg !== null) {\n            try {\n                if (!(msg instanceof Error)) { //Do not attempt to stringify Error-objects. Always results in {}.\n                    msg = JSON.stringify(msg);\n                }\n                json.error += \": \" + msg;\n            }\n            catch (e) { //stringify fail\n            }\n        }\n\n        //Return assembled error-message (json format)\n        return json;\n    }\n\n    _processRequest(params) {\n        var that = this;\n        return new Promise((resolve) => {\n            var reply = {};\n            reply.data = null;\n            reply.error = null;\n            var objectType = null;\n            var objectName = null;\n\n            if (params.hasOwnProperty(\"mode\") && (params.mode === \"read\" || params.mode === \"write\")) {\n                if (params.mode === \"read\") {\n                    //READ\n                    if (params.hasOwnProperty(\"room\")) {\n                        objectType = \"room\";\n                        objectName = params.room;\n                    }\n                    else {\n                        if (params.hasOwnProperty(\"device\")) {\n                            objectType = \"device\";\n                            objectName = params.device;\n                        }\n                    }\n\n                    if (objectType === null) {\n                        reply.error = HTTPInterface._getErrorReply(interfaceError.unsupportedParam, \"Please specify which data to read\");\n                        resolve(reply);\n                    }\n                    else {\n                        that._database.getObject(objectType, objectName)\n                            .catch((error) => {\n                                reply.error = HTTPInterface._getErrorReply(interfaceError.database, error);\n                                reply.error = error;\n                                resolve(reply);\n                            })\n                            .then((queriedObject) => {\n                                reply.data = queriedObject;\n                                resolve(reply);\n                            });\n                    }\n                }\n                else {\n                    //Example: myRaspberry, light, 1, dimmer, 75.0\n                    if (params.hasOwnProperty(\"deviceName\")\n                        && params.hasOwnProperty(\"objectType\")\n                        && params.hasOwnProperty(\"objectId\")\n                        && params.hasOwnProperty(\"resourceType\")\n                        && params.hasOwnProperty(\"value\")) {\n                        if (typeof params.value !== \"string\") {\n                            params.value = JSON.stringify(params.value);\n                        }\n                        var httpCode;\n                        that._write(params.deviceName, params.objectType, params.objectId, params.resourceType, params.value)\n                            .catch((error) => {\n                                if (typeof error.code !== \"undefined\" && error.code !== null) { //if present, translate coap error-code to http\n                                    httpCode = coapToHTTP[error.code];\n                                }\n                                reply.error = HTTPInterface._getErrorReply(interfaceError.writeFail, error);\n                                resolve([reply, httpCode]);\n                            })\n                            .then(() => {\n                                resolve(reply); //If no error on write, leave all fields null\n                            })\n                    }\n                    else {\n                        reply.error = HTTPInterface._getErrorReply(interfaceError.unsupportedParam, \"Write must include 'deviceName',\" +\n                            \"'objectType', 'objectId', 'resourceType', 'value'.\");\n                        resolve(reply);\n                    }\n                }\n            }\n            else {\n                reply.error = HTTPInterface._getErrorReply(interfaceError.unsupportedParam, \"Expected 'read' or 'write' for parameter 'mode'.\");\n                resolve(reply);\n            }\n        });\n    }\n\n    _write(deviceName, objectType, objectId, resourceType, value) {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            var ids = mapping.getAttrId(objectType, resourceType);\n            if (ids === null) {\n                reject(new Error(\"Invalid objectType or resourceType\"));\n            }\n            else {\n                if (ids.readOnly === true) {\n                    reject(new Error(\"Resource '\" + resourceType + \"' of objectType '\" + objectType + \"' is read-only\"));\n                }\n                else {\n                    util.write(that._lwm2m, deviceName, ids.objectTypeId, objectId, ids.resourceTypeId, value)\n                        .catch((error) => {\n                            reject(error);\n                        })\n                        .then(resolve);\n                }\n            }\n        });\n    }\n\n    _listen(options) {\n        var that = this;\n        return new Promise((resolve) => {\n            that._server = https.createServer(options, (req, res) => {\n                let head = {\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': '*'\n                };\n                if (req.method != \"POST\") {\n                    logger.debug(\"HTTPInterface: Invalid method from [\" + req.headers.host + \"]: \" + req.method);\n                    res.writeHead(405, head);\n                    res.end(JSON.stringify(HTTPInterface._getErrorReply(interfaceError.invalidHTTPMethod, \"Use POST\")));\n                }\n                else {\n                    var body = \"\";\n                    var bodyValid;\n                    req.on(\"data\", (data) => {\n                        body += data;\n                    });\n                    req.on(\"end\", () => {\n                        bodyValid = true;\n                        logger.debug(\"HTTPInterface: Received data from [\" + req.connection.remoteAddress + \"]\", body);\n                        try {\n                            var params = JSON.parse(body);\n                        }\n                        catch (e) {\n                            res.writeHead(415, head);\n                            res.end(JSON.stringify(HTTPInterface._getErrorReply(interfaceError.invalidJSON, e)));\n                            bodyValid = false;\n                        }\n                        if (bodyValid) {\n                            that._processRequest(params) //Process request and ...\n                                .then((result) => {\n                                    var reply, errorCode;\n                                    if (result instanceof Array) {\n                                        reply = result[0];\n                                        errorCode = result[1];\n                                    }\n                                    else {\n                                        reply = result;\n                                    }\n                                    if (typeof reply.error === \"undefined\" || reply.error === null) {\n                                        res.writeHead(200, head); //all OK\n                                    }\n                                    else {\n                                        if (typeof errorCode !== \"undefined\" && errorCode !== null) {\n                                            res.writeHead(errorCode, head); //Error from coap\n                                        }\n                                        else {\n                                            res.writeHead(500, head); //Unknown error\n                                        }\n                                    }\n                                    reply = JSON.stringify(reply);\n                                    logger.debug(\"HTTPInterface: Sending data to [\" + req.connection.remoteAddress + \"]\", reply);\n                                    res.end(reply); //... reply to client\n                                });\n                        }\n                    });\n                }\n            });\n\n            that._server.listen(that._port, that._host, () => {\n                logger.debug(\"HTTPInterface: Listening at https://\" + that._host + \":\" + that._port);\n                resolve();\n            });\n        });\n    }\n\n    open() {\n        var that = this;\n        this._opened = new Promise((resolve, reject) => {\n            that._getCertFiles(that._keyFile, that._certFile)\n                .catch(reject)\n                .then((options) => {\n                    return that._listen(options)\n                })\n                .then(resolve);\n        });\n        return this._opened;\n    }\n\n    close() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            Promise.all([that._opened]) //Wait for start before stop\n                .then(() => {\n                    that._server.close((error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        resolve();\n                    });\n                });\n        });\n    }\n}\n\nexport default HTTPInterface;"]}