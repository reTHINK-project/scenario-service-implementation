{"version":3,"sources":["../src/HTTPInterface.js"],"names":[],"mappings":"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","file":"HTTPInterface.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport https from \"https\";\nimport logger from \"logops\";\nimport util from \"./Util\";\n\nclass HTTPInterface {\n\n    constructor(host, port, keyFile, certFile, database) {\n        this._host = host;\n        this._port = port;\n        this._keyFile = keyFile;\n        this._certFile = certFile;\n        this._database = database;\n        this._server = {};\n    }\n\n    _getCertFiles(keyFile, certFile) {\n        return new Promise((resolve, reject) => {\n            if (typeof keyFile === \"undefined\" || typeof certFile === \"undefined\") {\n                reject(new Error(\"Invalid path to cert-files!\"));\n            }\n            else {\n                var options = {};\n                util.readFile(keyFile)\n                    .catch(reject)\n                    .then((key) => {\n                        options.key = key;\n                        return util.readFile(certFile);\n                    })\n                    .catch(reject)\n                    .then((cert) => {\n                        options.cert = cert;\n                        resolve(options);\n                    });\n            }\n        });\n    }\n\n    static _getErrorReply(error, msg) {\n        var json = {};\n        switch (error) {\n            case \"invalidBody\":\n                json.error = \"Invalid JSON-String!\";\n                break;\n            case \"invalidMethod\":\n                json.error = \"Method not supported\";\n                break;\n            case \"unsupportedParam\":\n                json.error = \"Unsupported parameter\";\n                break;\n            default:\n                json.error = \"Unknown\";\n                break;\n        }\n        if (typeof msg !== \"undefined\" && msg !== null) {\n            json.error += \": \" + msg;\n        }\n        return JSON.stringify(json); //Convert to String for network\n    }\n\n    _processRequest(params) {\n        var that = this;\n        return new Promise((resolve) => {\n            var reply = {};\n            reply.data = null;\n            reply.error = null;\n            var objectType = null;\n            var objectName = null;\n\n            if (params.hasOwnProperty(\"room\")) {\n                objectType = \"room\";\n                objectName = params.room;\n            }\n            else {\n                if (params.hasOwnProperty(\"device\")) {\n                    objectType = \"device\";\n                    objectName = params.device;\n                }\n            }\n\n            if (objectType === null) {\n                reply.error = HTTPInterface._getErrorReply(\"unsupportedParam\");\n                resolve(JSON.stringify(reply));\n            }\n            else {\n                that._database.getObject(objectName, objectType)\n                    .catch((error) => {\n                        reply.error = HTTPInterface._getErrorReply(null, error);\n                        reply.error = error;\n                        resolve(reply);\n                    })\n                    .then((queriedObject) => {\n                        reply.data = queriedObject;\n                        resolve(JSON.stringify(reply)); //Convert to string for network\n                    });\n            }\n\n        });\n    }\n\n    _listen(options) {\n        var that = this;\n        return new Promise((resolve) => {\n            that._server = https.createServer(options, (req, res) => {\n                if (req.method != \"POST\") {\n                    logger.debug(\"HTTPInterface: Invalid method from [\" + req.headers.host + \"]: \" + req.method);\n                    res.writeHead(405, {'Content-Type': 'application/json'});\n                    res.end(HTTPInterface._getErrorReply(\"invalidMethod\", \"Use POST\"));\n                }\n                else {\n                    var body = \"\";\n                    req.on(\"data\", (data) => {\n                        body += data;\n                    });\n                    req.on(\"end\", () => {\n                        logger.debug(\"HTTPInterface: Received data from [\" + req.headers.host + \"]\", body);\n                        try {\n                            var params = JSON.parse(body);\n                        }\n                        catch (e) {\n                            res.writeHead(415, {'Content-Type': 'application/json'});\n                            res.end(HTTPInterface._getErrorReply(\"invalidBody\", e));\n                        }\n                        that._processRequest(params) //Process request and ...\n                            .then((reply) => {\n                                logger.debug(\"HTTPInterface: Sending data to [\" + req.headers.host + \"]\", reply);\n                                res.writeHead(200, {'Content-Type': 'application/json'});\n                                res.end(reply); //... reply to client\n                            });\n                    });\n                }\n            });\n\n            that._server.listen(that._port, that._host, () => {\n                logger.debug(\"HTTPInterface: Listening at https://\" + that._host + \":\" + that._port);\n                resolve();\n            });\n        });\n    }\n\n    open() {\n        var that = this;\n        this._opened = new Promise((resolve, reject) => {\n            that._getCertFiles(that._keyFile, that._certFile)\n                .catch(reject)\n                .then((options) => {\n                    return that._listen(options)\n                })\n                .then(resolve);\n        });\n        return this._opened;\n    }\n\n    close() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            Promise.all([that._opened]) //Wait for start before stop\n                .then(() => {\n                    that._server.close((error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        resolve();\n                    });\n                });\n        });\n    }\n}\n\nexport default HTTPInterface;"]}