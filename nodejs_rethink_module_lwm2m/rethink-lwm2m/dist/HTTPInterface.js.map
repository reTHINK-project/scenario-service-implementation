{
  "version": 3,
  "sources": [
    "../src/HTTPInterface.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "HTTPInterface.js",
  "sourcesContent": [
    "/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport https from \"https\";\nimport fs from \"fs\";\nimport logger from \"logops\";\n\nclass HTTPInterface {\n\n    constructor(host, port, keyFile, certFile, database) {\n        this._host = host;\n        this._port = port;\n        this._keyFile = keyFile;\n        this._certFile = certFile;\n        this._database = database;\n        this._server = {};\n    }\n\n    _getCertFiles(keyFile, certFile) {\n        return new Promise((resolve, reject) => {\n\n            if (typeof keyFile === \"undefined\" || typeof certFile === \"undefined\") {\n                reject(new Error(\"Invalid path to cert-files!\"));\n            }\n            else {\n                var options = {};\n\n                fs.readFile(keyFile, (error, data) => {\n                    options.key = data;\n                    done(error);\n                });\n                fs.readFile(certFile, (error, data) => {\n                    options.cert = data;\n                    done(error);\n                });\n                //noinspection JSAnnotator\n                function done(error) {\n                    if (error) {\n                        reject(error);\n                    }\n                    if (options.hasOwnProperty(\"cert\") && options.hasOwnProperty(\"key\")) {\n                        resolve(options);\n                    }\n                }\n            }\n        });\n    }\n\n    static _getErrorReply(host, error, msg) {\n        var json = {};\n        switch (error) {\n            case \"invalidBody\":\n                json.error = \"Invalid JSON-String!\";\n                break;\n            case \"invalidMethod\":\n                json.error = \"Method not supported\";\n                break;\n            case \"unsupportedParam\":\n                json.error = \"Unsupported parameter\";\n                break;\n            default:\n                json.error = \"Unknown\";\n                break;\n        }\n        if (typeof msg !== \"undefined\" && msg !== null) {\n            json.error += \": \" + msg;\n        }\n        logger.debug(\"HTTPInterface error [\" + host + \"]\", json);\n        return JSON.stringify(json); //Convert to String for network\n    }\n\n    _processRequest(params) {\n        var that = this;\n        return new Promise((resolve) => {\n            var reply = {};\n            reply.data = null;\n            reply.error = null; //TODO: let _getErrorReply() handle errors\n\n            if (!params.hasOwnProperty(\"room\")) {\n                reply.error = \"Given parameters not supported!\";\n            }\n            else {\n                that._database.getRoom(params.room)\n                    .catch((error) => {\n                        logger.error(\"Process POST-request: Error while querying room '\" + params.room + \"'!\", error);\n                        reply.error = error;\n                        resolve(JSON.stringify(reply))\n                    })\n                    .then((room) => {\n                        reply.data = room;\n                        resolve(JSON.stringify(reply));\n                    })\n            }\n        });\n\n    }\n\n    _listen(options) {\n        var that = this;\n        return new Promise((resolve) => {\n            that._server = https.createServer(options, (req, res) => {\n                if (req.method != \"POST\") {\n                    res.writeHead(405, {'Content-Type': 'application/json'});\n                    res.end(HTTPInterface._getErrorReply(req.headers.host, \"invalidMethod\", \"Use POST\"));\n                }\n                else {\n                    logger.debug(\"POST\");\n\n                    var body = \"\";\n                    req.on(\"data\", (data) => {\n                        body += data;\n                    });\n                    req.on(\"end\", () => {\n                        logger.debug(\"Received data\", body);\n                        try {\n                            var params = JSON.parse(body);\n                        }\n                        catch (e) {\n                            res.writeHead(415, {'Content-Type': 'application/json'});\n                            res.end(HTTPInterface._getErrorReply(req.headers.host, \"invalidBody\", e));\n                        }\n                        res.writeHead(200, {'Content-Type': 'application/json'});\n                        that._processRequest(params) //Process request and ...\n                            .then((reply) => {\n                                res.end(reply);\n                            }); //... reply to client\n                    });\n                }\n            });\n\n            that._server.listen(that._port, that._host);\n            logger.debug(\"HTTPinterface: Listening at https://\" + that._host + \":\" + that._port);\n            resolve();\n        });\n    }\n\n    open() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            that._getCertFiles(that._keyFile, that._certFile)\n                .catch(reject)\n                .then((options) => {\n                    return that._listen(options);\n                })\n                .then(resolve());\n        });\n    }\n\n    close() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            that._server.close((error) => {\n                if (error) {\n                    reject(error);\n                }\n                resolve();\n            })\n        });\n    }\n}\n\nexport default HTTPInterface;"
  ]
}