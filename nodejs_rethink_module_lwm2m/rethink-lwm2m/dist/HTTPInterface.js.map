{"version":3,"sources":["../src/HTTPInterface.js"],"names":[],"mappings":"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","file":"HTTPInterface.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport https from \"https\";\nimport logger from \"logops\";\nimport util from \"./Util\";\n\nclass HTTPInterface {\n\n    constructor(host, port, keyFile, certFile, database) {\n        this._host = host;\n        this._port = port;\n        this._keyFile = keyFile;\n        this._certFile = certFile;\n        this._database = database;\n        this._server = {};\n    }\n\n    _getCertFiles(keyFile, certFile) {\n        return new Promise((resolve, reject) => {\n            if (typeof keyFile === \"undefined\" || typeof certFile === \"undefined\") {\n                reject(new Error(\"Invalid path to cert-files!\"));\n            }\n            else {\n                var options = {};\n                util.readFile(keyFile)\n                    .catch(reject)\n                    .then((key) => {\n                        options.key = key;\n                        return util.readFile(certFile);\n                    })\n                    .catch(reject)\n                    .then((cert) => {\n                        options.cert = cert;\n                        resolve(options);\n                    });\n            }\n        });\n    }\n\n    //TODO: Refactor: use \"enum\"\n    static _getErrorReply(error, msg) {\n        var json = {};\n        switch (error) {\n            case \"invalidBody\":\n                json.error = \"Invalid JSON-String!\";\n                break;\n            case \"invalidMethod\":\n                json.error = \"Method not supported\";\n                break;\n            case \"unsupportedParam\":\n                json.error = \"Unsupported parameter\";\n                break;\n            default:\n                json.error = \"Unknown\";\n                break;\n        }\n        if (typeof msg !== \"undefined\" && msg !== null) {\n            json.error += \": \" + msg;\n        }\n        return JSON.stringify(json); //Convert to String for network\n    }\n\n    _processRequest(params) {\n        var that = this;\n        return new Promise((resolve) => {\n            var reply = {};\n            reply.data = null;\n            reply.error = null;\n            var objectType = null;\n            var objectName = null;\n\n            if (params.hasOwnProperty(\"room\")) {\n                objectType = \"room\";\n                objectName = params.room;\n            }\n            else {\n                if (params.hasOwnProperty(\"device\")) {\n                    objectType = \"device\";\n                    objectName = params.device;\n                }\n            }\n\n            if (objectType === null) {\n                reply.error = HTTPInterface._getErrorReply(\"unsupportedParam\");\n                resolve(JSON.stringify(reply));\n            }\n            else {\n                that._database.getObject(objectName, objectType)\n                    .catch((error) => {\n                        reply.error = HTTPInterface._getErrorReply(null, error);\n                        reply.error = error;\n                        resolve(reply);\n                    })\n                    .then((queriedObject) => {\n                        reply.data = queriedObject;\n                        resolve(JSON.stringify(reply)); //Convert to string for network\n                    });\n            }\n\n        });\n    }\n\n    _listen(options) {\n        var that = this;\n        return new Promise((resolve) => {\n            that._server = https.createServer(options, (req, res) => {\n                let head = {\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': '*'\n                };\n                if (req.method != \"POST\") {\n                    logger.debug(\"HTTPInterface: Invalid method from [\" + req.headers.host + \"]: \" + req.method);\n                    res.writeHead(405, head);\n                    res.end(HTTPInterface._getErrorReply(\"invalidMethod\", \"Use POST\"));\n                }\n                else {\n                    var body = \"\";\n                    req.on(\"data\", (data) => {\n                        body += data;\n                    });\n                    req.on(\"end\", () => {\n                        logger.debug(\"HTTPInterface: Received data from [\" + req.headers.host + \"]\", body);\n                        try {\n                            var params = JSON.parse(body);\n                        }\n                        catch (e) {\n                            res.writeHead(415, head);\n                            res.end(HTTPInterface._getErrorReply(\"invalidBody\", e));\n                        }\n                        that._processRequest(params) //Process request and ...\n                            .then((reply) => {\n                                logger.debug(\"HTTPInterface: Sending data to [\" + req.headers.host + \"]\", reply);\n                                res.writeHead(200, head);\n                                res.end(reply); //... reply to client\n                            });\n                    });\n                }\n            });\n\n            that._server.listen(that._port, that._host, () => {\n                logger.debug(\"HTTPInterface: Listening at https://\" + that._host + \":\" + that._port);\n                resolve();\n            });\n        });\n    }\n\n    open() {\n        var that = this;\n        this._opened = new Promise((resolve, reject) => {\n            that._getCertFiles(that._keyFile, that._certFile)\n                .catch(reject)\n                .then((options) => {\n                    return that._listen(options)\n                })\n                .then(resolve);\n        });\n        return this._opened;\n    }\n\n    close() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            Promise.all([that._opened]) //Wait for start before stop\n                .then(() => {\n                    that._server.close((error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        resolve();\n                    });\n                });\n        });\n    }\n}\n\nexport default HTTPInterface;"]}