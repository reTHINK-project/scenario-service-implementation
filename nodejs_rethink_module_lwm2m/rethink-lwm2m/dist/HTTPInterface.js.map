{
  "version": 3,
  "sources": [
    "../src/HTTPInterface.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "HTTPInterface.js",
  "sourcesContent": [
    "/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport https from \"https\";\nimport fs from \"fs\";\nimport logger from \"logops\";\n\nclass HTTPInterface {\n\n    constructor(host, port, keyFile, certFile, database) {\n        this._host = host;\n        this._port = port;\n        this._keyFile = keyFile;\n        this._certFile = certFile;\n        this._database = database;\n        this._server = {};\n    }\n\n    _getCertFiles(keyFile, certFile) {\n        return new Promise(function (resolve, reject) {\n\n            if (typeof keyFile === \"undefined\" || typeof certFile === \"undefined\") {\n                reject(new Error(\"Invalid path to cert-files!\"));\n            }\n            else {\n                var options = {};\n\n                fs.readFile(keyFile, (error, data) => {\n                    options.key = data;\n                    done(error);\n                });\n                fs.readFile(certFile, (error, data) => {\n                    options.cert = data;\n                    done(error);\n                });\n                //noinspection JSAnnotator\n                function done(error) {\n                    if (error) {\n                        reject(error);\n                    }\n                    if (options.hasOwnProperty(\"cert\") && options.hasOwnProperty(\"key\")) {\n                        resolve(options);\n                    }\n                }\n            }\n        });\n    }\n\n\n    open() { //TODO: Implement this with POST. Client (hyperty) will specify which data is needed\n        var that = this;\n        return new Promise((resolve, reject) => {\n            that._getCertFiles(that._keyFile, that._certFile)\n                .catch(reject)\n                .then(options => {\n                    that._server = https.createServer(options, (req, res) => {\n                        that._database.getRoom(\"room1\")\n                            .catch((error) => {\n                                logger.error(error);\n                                res.writeHead(500); //Server error\n                            })\n                            .then((room) => {\n                                res.writeHead(200);\n                                res.end(JSON.stringify(room));\n                            });\n                    });\n\n                    that._server.listen(that._port, that._host);\n                    logger.debug(\"HTTPinterface: Listening at https://\" + that._host + \":\" + that._port);\n                    resolve();\n                });\n        });\n    }\n\n    close() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            that._server.close(function (error) {\n                if (error) {\n                    reject(error);\n                }\n                resolve();\n            })\n        });\n    }\n}\n\nexport default HTTPInterface;"
  ]
}