{
  "version": 3,
  "sources": [
    "../src/Database.js"
  ],
  "names": [
    "Database",
    "config",
    "_config",
    "_lastStoreValue",
    "that",
    "Promise",
    "resolve",
    "reject",
    "connected",
    "Error",
    "_init",
    "then",
    "_connection",
    "createConnection",
    "db",
    "host",
    "database",
    "connection",
    "on",
    "mongodbErrorHandler",
    "error",
    "fatal",
    "once",
    "debug",
    "load",
    "close",
    "readyState",
    "listCollections",
    "name",
    "next",
    "err",
    "collinfo",
    "errors",
    "_parseRooms",
    "_parseDevices",
    "_setReferences",
    "length",
    "hotel",
    "hasOwnProperty",
    "each",
    "rooms",
    "cfg_room",
    "callback2",
    "room",
    "model",
    "isBooked",
    "members",
    "save",
    "push",
    "devices",
    "cfg_device",
    "device",
    "callback",
    "findOne",
    "deviceName",
    "register",
    "payload",
    "registration",
    "registered",
    "timestamp",
    "Date",
    "now",
    "undefined",
    "objectType",
    "objectId",
    "resourceId",
    "value",
    "_storeValueSynced",
    "catch",
    "category",
    "location",
    "attr",
    "getAttrName",
    "resourceType",
    "parseFloat",
    "JSON",
    "parse",
    "found",
    "lastValues",
    "forEach",
    "entry",
    "id",
    "parseInt",
    "setNestedValue",
    "uri",
    "obj",
    "type",
    "objName",
    "query",
    "find",
    "populate",
    "exec",
    "result"
  ],
  "mappings": "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",
  "file": "Database.js",
  "sourcesContent": [
    "/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport mongoose from \"mongoose\";\nimport Room from \"./models/Room\";\nimport Device from \"./models/Device\";\nimport async from \"async\";\nimport logger from \"logops\";\nimport util from \"./Util\";\nimport mapping from \"./lwm2m-mapping\";\n\nclass Database {\n\n    constructor(config) {\n        this._config = config;\n        this._lastStoreValue = null;\n    }\n\n    set config(config) {\n        this._config = config;\n    }\n\n    get config() {\n        return this._config;\n    }\n\n    get connection() {\n        return this._connection;\n    }\n\n    connect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                reject(new Error(\"Already connected or connection pending!\"));\n            }\n            else {\n                that._init().then(resolve);\n            }\n        });\n    }\n\n    _init() {\n        var that = this;\n        return new Promise((resolve) => {\n            that._connection = mongoose.createConnection(that.config.db.host, that.config.db.database);\n            that.connection.on('error', function mongodbErrorHandler(error) {\n                logger.fatal('Could not establish connection to mongodb!', error);\n                throw new Error(error);\n            });\n            that.connection.once('open', () => {\n                logger.debug('Database.js: connected to mongodb!');\n                Device.load(that.connection);\n                Room.load(that.connection);\n                resolve();\n            });\n        });\n    }\n\n    disconnect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                that.connection.close(() => {\n                    resolve();\n                })\n            }\n            else {\n                reject(new Error(\"Can't close db-connection: Not connected!\"));\n            }\n        });\n    }\n\n    connected() {\n        if (typeof this.connection !== 'undefined') {\n            return this.connection.readyState === 1 || this.connection.readyState === 2;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isInitialised() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (!that.connected()) {\n                reject(new Error(\"Not connected to db!\"));\n            }\n            else {\n                that.connection.db.listCollections({name: 'rooms'}) //appended 's' is mongoose-behavior, see: http://bit.ly/1Lq65AJ)\n                    .next((err, collinfo) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            resolve(typeof collinfo !== 'undefined' && collinfo !== null);\n                        }\n                    });\n            }\n        });\n    }\n\n\n    createHotel() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (typeof that.config === 'undefined') {\n                reject(new Error(\"Missing config!\"));\n            }\n            else {\n                if (!that.connected()) {\n                    reject(new Error(\"Can't save data to db! Not connected!\"));\n                }\n                else {\n                    var errors = [];\n\n                    that._parseRooms(errors)\n                        .then((errors) => {\n                            return that._parseDevices(errors);\n                        })\n                        .then((errors) => {\n                            return that._setReferences(errors);\n                        })\n                        .then((errors) => {\n                            if (errors.length === 0) {\n                                errors = null;\n                            }\n                            resolve(errors);\n                        });\n                }\n            }\n        });\n    }\n\n    _parseRooms(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('rooms')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Room-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.rooms, (cfg_room, callback2) => {\n                        var room = Room.model();\n                        room.name = cfg_room.name;\n                        room.isBooked = cfg_room.isBooked;\n                        room.members = cfg_room.members;\n                        room.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                            }\n                            logger.debug(\"Added room '%s'\", cfg_room.name);\n                            callback2();\n                        });\n\n                    },\n                    () => {\n                        resolve(errors);\n                    }\n                );\n            }\n        });\n    }\n\n    _parseDevices(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('devices')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Device-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.devices, (cfg_device, callback2) => {\n                    var device = Device.model();\n                    device.name = cfg_device.name;\n                    device.save((error) => {\n                        if (error) {\n                            errors.push(error);\n                        }\n                        logger.debug(\"Added device '%s'\", cfg_device.name);\n                        callback2();\n                    });\n                }, () => {\n                    resolve(errors);\n                });\n            }\n        });\n\n    }\n\n    _setReferences(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            logger.debug(\"Establishing db-references\");\n            async.each(that.config.hotel.devices, (cfg_device, callback) => {\n                if (!cfg_device.hasOwnProperty('room')) {\n                    logger.debug(\"Device '%s' has no room-reference. Skipping...\", cfg_device.name);\n                    return callback();\n                }\n                Room.model.findOne({name: cfg_device.room}, (error, room) => {\n                    if (error) {\n                        errors.push(new Error(\"Error while querying db\", error));\n                        return callback();\n                    }\n                    else {\n                        if (!room) {\n                            errors.push(new Error(\"Invalid reference '\" + cfg_device.name + \".\" + cfg_device.room + \"'! Room '\" + cfg_device.room + \"' not found.\"));\n                            return callback();\n                        }\n                    }\n                    Device.model.findOne({name: cfg_device.name}, (error, device) => {\n                        if (error) {\n                            errors.push(new Error(\"Error while querying db\", error));\n                            return callback();\n                        }\n                        if (!device) {\n                            errors.push(new Error(\"Can't set reference, device '\" + cfg_device.name + \"' not found in db\"));\n                            return callback();\n                        }\n                        //Bidirectional\n                        device.room = room;\n                        room.devices.push(device);\n\n                        device.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                                return callback();\n                            }\n                            room.save((error) => {\n                                if (error) {\n                                    errors.push(error);\n                                    return callback();\n                                }\n                                logger.debug(\"Linked device '%s' to room '%s'\", device.name, room.name);\n                                callback();\n                            })\n                        });\n                    });\n                });\n            }, () => {\n                resolve(errors);\n            });\n        });\n    }\n\n\n    /*\n     register type:Boolean - Register or de-register device\n     */\n    registerDevice(deviceName, register, payload) {\n        return new Promise((resolve, reject) => {\n            if (typeof register !== 'boolean') {\n                reject(new Error(\"Invalid param. register, boolean expected.\"));\n            }\n            Device.model.findOne({name: deviceName}, (error, device) => { //Get device by name\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        logger.debug(\"Device not existing in db, creating ...\");\n\n                        device = Device.model();\n                        device.name = deviceName;\n                    }\n\n                    device.registration.registered = register;\n                    if (register) device.registration.timestamp = Date.now();\n\n                    //Set / remove payload if given\n                    if (register === true) {\n                        if (typeof payload !== 'undefined' && payload !== null)\n                            device.registration.payload = payload;\n                    }\n                    else {\n                        device.registration.payload = undefined;\n                    }\n\n                    device.save((error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        resolve();\n                    });\n                }\n            });\n        });\n    }\n\n    //Wait for other queries to finish\n    storeValue(deviceName, objectType, objectId, resourceId, value) {\n        var that = this;\n        if (that._lastStoreValue === null) {\n            that._lastStoreValue = that._storeValueSynced(deviceName, objectType, objectId, resourceId, value);\n            return that._lastStoreValue;\n        }\n        else {\n            that._lastStoreValue = new Promise((resolve, reject) => {\n                that._lastStoreValue\n                    .catch(reject)\n                    .then(() => {\n                        that._storeValueSynced(deviceName, objectType, objectId, resourceId, value)\n                            .catch(reject)\n                            .then(() => {\n                                resolve();\n                            });\n                    });\n            });\n            return that._lastStoreValue;\n        }\n    }\n\n    _storeValueSynced(deviceName, objectType, objectId, resourceId, value) {\n        return new Promise((resolve, reject) => {\n            Device.model.findOne({name: deviceName}, (error, device) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        reject(new Error(\"Can't store value in db for device '\" + deviceName + \"'! Device not found!\"));\n                    }\n                    else {\n                        var category;\n                        var location;\n\n                        var attr = mapping.getAttrName(objectType, resourceId);\n                        if (attr === null) {\n                            category = \"misc\";\n                            location = \"value\";\n                        }\n                        else {\n                            category = attr.objectType;\n                            location = attr.resourceType;\n\n                            //Parse floats if needed\n                            if (((category === \"temperature\" || category === \"humidity\" ) && location === \"value\")\n                                || category === \"light\" && location === \"dimmer\"\n                            ) {\n                                value = parseFloat(value);\n                            }\n                            else {\n                                //Parse color array (hue specific)\n                                if (category === \"light\" && location === \"color.value\") {\n                                    try {\n                                        value = JSON.parse(value);\n                                    }\n                                    catch (error) {\n                                        logger.error(\"Error while parsing color.value\", error);\n                                    }\n                                }\n                            }\n                        }\n\n\n                        var found = false;\n                        device.lastValues[category].forEach((entry) => {\n                            if (entry.id === parseInt(objectId)) {\n                                util.setNestedValue(entry, location, value);\n                                if (location === \"misc\") {\n                                    entry.uri = '/' + objectType + '/' + objectId + '/' + resourceId;\n                                }\n                                entry.timestamp = Date.now();\n                                found = true;\n                            }\n                        });\n\n                        if (!found) {\n                            var obj = {};\n                            util.setNestedValue(obj, location, value);\n                            if (location === \"misc\") {\n                                obj.uri = '/' + objectType + '/' + objectId + '/' + resourceId;\n                            }\n                            obj.id = objectId;\n                            obj.timestamp = Date.now();\n                            device.lastValues[category].push(obj);\n                        }\n\n                        device.save((error) => {\n                            if (error) {\n                                reject(error);\n                            }\n                            else {\n                                resolve();\n                            }\n                        })\n                    }\n                }\n            });\n        });\n    }\n\n    getObject(type, objName) {\n        return new Promise((resolve, reject) => {\n            if (typeof type === \"undefined\") {\n                reject(new Error(\"Database.getObject(): Invalid parameters!\"));\n            }\n            else {\n                var model = {};\n                switch (type) {\n                    case \"device\":\n                        model = Device.model;\n                        break;\n                    case \"room\":\n                        model = Room.model;\n                        break;\n                    default:\n                        reject(new Error(\"Invalid type\"));\n                        break;\n                }\n                var query;\n                if (typeof objName === \"undefined\" || objName === null) {\n                    query = model.find();\n                }\n                else {\n                    query = model.findOne({name: objName});\n                }\n                if (type === \"room\") { //Check if we need to populate\n                    query.populate(\"devices\");\n                }\n                query.exec((error, result) => {\n                    if (error) {\n                        reject(error);\n                    }\n                    resolve(result);\n                });\n            }\n        });\n    }\n}\n\nexport default Database;"
  ]
}