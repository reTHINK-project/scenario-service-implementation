{"version":3,"sources":["../src/Database.js"],"names":[],"mappings":"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","file":"Database.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport mongoose from \"mongoose\";\nimport Room from \"./models/Room\";\nimport Device from \"./models/Device\";\nimport async from \"async\";\nimport logger from \"logops\";\n\n\nclass Database {\n\n    constructor(config) {\n        this._config = config;\n    }\n\n    set config(config) {\n        this._config = config;\n    }\n\n    get config() {\n        return this._config;\n    }\n\n    get connection() {\n        return this._connection;\n    }\n\n    connect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                reject(new Error(\"Already connected or connection pending!\"));\n            }\n            else {\n                that._init().then(resolve);\n            }\n        });\n    }\n\n    _init() {\n        var that = this;\n        return new Promise((resolve) => {\n            that._connection = mongoose.createConnection(that.config.db.host, that.config.db.database);\n            that.connection.on('error', function mongodbErrorHandler(error) {\n                logger.fatal('Could not establish connection to mongodb!', error);\n                throw new Error(error);\n            });\n            that.connection.once('open', () => {\n                logger.debug('Database.js: connected to mongodb!');\n                Device.load(that.connection);\n                Room.load(that.connection);\n                resolve();\n            });\n        });\n    }\n\n    disconnect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                that.connection.close(() => {\n                    resolve();\n                })\n            }\n            else {\n                reject(new Error(\"Can't close db-connection: Not connected!\"));\n            }\n        });\n    }\n\n    connected() {\n        if (typeof this.connection !== 'undefined') {\n            return this.connection.readyState === 1 || this.connection.readyState === 2;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isInitialised() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (!that.connected()) {\n                reject(new Error(\"Not connected to db!\"));\n            }\n            else {\n                that.connection.db.listCollections({name: 'rooms'}) //appended 's' is mongoose-behavior, see: http://bit.ly/1Lq65AJ)\n                    .next((err, collinfo) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            resolve(typeof collinfo !== 'undefined' && collinfo !== null);\n                        }\n                    });\n            }\n        });\n    }\n\n\n    createHotel() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (typeof that.config === 'undefined') {\n                reject(new Error(\"Missing config!\"));\n            }\n            else {\n                if (!that.connected()) {\n                    reject(new Error(\"Can't save data to db! Not connected!\"));\n                }\n                else {\n                    var errors = [];\n\n                    that._parseRooms(errors)\n                        .then((errors) => {\n                            return that._parseDevices(errors);\n                        })\n                        .then((errors) => {\n                            return that._setReferences(errors);\n                        })\n                        .then((errors) => {\n                            if (errors.length === 0) {\n                                errors = null;\n                            }\n                            resolve(errors);\n                        });\n                }\n            }\n        });\n    }\n\n    _parseRooms(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('rooms')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Room-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.rooms, (cfg_room, callback2) => {\n                        var room = Room.model();\n                        room.name = cfg_room.name;\n                        room.isBooked = cfg_room.isBooked;\n                        room.members = cfg_room.members;\n                        room.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                            }\n                            logger.debug(\"Added room '%s'\", cfg_room.name);\n                            callback2();\n                        });\n\n                    },\n                    () => {\n                        resolve(errors);\n                    }\n                );\n            }\n        });\n    }\n\n    _parseDevices(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('devices')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Device-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.devices, (cfg_device, callback2) => {\n                    var device = Device.model();\n                    device.name = cfg_device.name;\n                    device.save((error) => {\n                        if (error) {\n                            errors.push(error);\n                        }\n                        logger.debug(\"Added device '%s'\", cfg_device.name);\n                        callback2();\n                    });\n                }, () => {\n                    resolve(errors);\n                });\n            }\n        });\n\n    }\n\n    _setReferences(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            logger.debug(\"Establishing db-references\");\n            async.each(that.config.hotel.devices, (cfg_device, callback) => {\n                if (!cfg_device.hasOwnProperty('room')) {\n                    logger.debug(\"Device '%s' has no room-reference. Skipping...\", cfg_device.name);\n                    return callback();\n                }\n                Room.model.findOne({name: cfg_device.room}, (error, room) => {\n                    if (error) {\n                        errors.push(new Error(\"Error while querying db\", error));\n                        return callback();\n                    }\n                    else {\n                        if (!room) {\n                            errors.push(new Error(\"Invalid reference '\" + cfg_device.name + \".\" + cfg_device.room + \"'! Room '\" + cfg_device.room + \"' not found.\"));\n                            return callback();\n                        }\n                    }\n                    Device.model.findOne({name: cfg_device.name}, (error, device) => {\n                        if (error) {\n                            errors.push(new Error(\"Error while querying db\", error));\n                            return callback();\n                        }\n                        if (!device) {\n                            errors.push(new Error(\"Can't set reference, device '\" + cfg_device.name + \"' not found in db\"));\n                            return callback();\n                        }\n                        //Bidirectional\n                        device.room = room;\n                        room.devices.push(device);\n\n                        device.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                                return callback();\n                            }\n                            room.save((error) => {\n                                if (error) {\n                                    errors.push(error);\n                                    return callback();\n                                }\n                                logger.debug(\"Linked device '%s' to room '%s'\", device.name, room.name);\n                                callback();\n                            })\n                        });\n                    });\n                });\n            }, () => {\n                resolve(errors);\n            });\n        });\n    }\n\n\n    /*\n     register type:Boolean - Register or de-register device\n     */\n    registerDevice(deviceName, register, payload) {\n        return new Promise((resolve, reject) => {\n            if (typeof register !== 'boolean') {\n                reject(new Error(\"Invalid param. register, boolean expected.\"));\n            }\n            Device.model.findOne({name: deviceName}, (error, device) => { //Get device by name\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        logger.debug(\"Device not existing in db, creating ...\");\n\n                        device = Device.model();\n                        device.name = deviceName;\n                    }\n\n                    device.registration.registered = register;\n                    if (register) device.registration.timestamp = Date.now();\n\n                    //Set / remove payload if given\n                    if (register === true) {\n                        if (typeof payload !== 'undefined' && payload !== null)\n                            device.registration.payload = payload;\n                    }\n                    else {\n                        device.registration.payload = null;\n                    }\n\n                    device.save((error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        resolve();\n                    });\n                }\n            });\n        });\n    }\n\n    storeValue(deviceName, objectType, objectId, resourceId, value) {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            Device.model.findOne({name: deviceName}, (error, device) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        reject(new Error(\"Can't store value in db for device '\" + deviceName + \"'! Device not found!\"));\n                    }\n                    else {\n                        var category;\n                        var location;\n\n                        switch (objectType) {\n                            case 3303:\n                                category = \"temperature\";\n                                switch (resourceId) {\n                                    case 5700: //Temp value\n                                        location = \"value\";\n                                        value = parseFloat(value);\n                                        break;\n                                    case 5701: //Temp unit\n                                        location = \"unit\";\n                                        break;\n                                    default:\n                                        reject(new Error(\"Can't store value for '\" + deviceName + \"'! Temperature: Unknown resource-id.\"));\n                                        break;\n                                }\n                                break;\n                            case 3304:\n                                category = \"humidity\";\n                                switch (resourceId) {\n                                    case 5700: //humidity value\n                                        location = \"value\";\n                                        value = parseFloat(value);\n                                        break;\n                                    case 5701: //humidity unit\n                                        location = \"unit\";\n                                        break;\n                                    default:\n                                        reject(new Error(\"Can't store value for '\" + deviceName + \"'! Humidity: Unknown resource-id.\"));\n                                        break;\n                                }\n                                break;\n                            case 3311:\n                                category = \"light\";\n                                switch (resourceId) {\n                                    case 5850:\n                                        location = \"isOn\";\n                                        break;\n                                    case 5851:\n                                        location = \"dimmer\";\n                                        value = parseFloat(value); //TODO: test\n                                        break;\n                                    case 5706:\n                                        location = \"color.value\";\n                                            value = JSON.parse(value);\n                                            var x = value[0];\n                                            var y = value[1];\n                                            value = {};\n                                            value.x = x;\n                                            value.y = y;\n                                        break;\n                                    case 5701:\n                                        location = \"color.unit\";\n                                        break;\n                                    default:\n                                        reject(new Error(\"Can't store value for '\" + deviceName + \"'! Light: Unknown resource-id.\"));\n                                        break;\n                                }\n                                break;\n                            default:\n                                category = \"misc\";\n                                location = \"value\";\n                                break;\n                        }\n\n                        var found = false;\n                        device.lastValues[category].forEach((entry) => { //TODO: Broken, lastValues[category] seems broken\n                            if (entry.id == objectId) {\n                                that._setNestedValue(entry, location, value);\n                                //entry[location] = value;\n                                if (location === \"misc\") {\n                                    entry.uri = '/' + objectType + '/' + objectId + '/' + resourceId;\n                                }\n                                entry.timestamp = Date.now();\n                                found = true;\n                            }\n                        });\n\n                        if (!found) {\n                            var obj = {};\n                            that._setNestedValue(obj, location, value);\n                            //obj[location] = value;\n                            obj.id = objectId;\n                            obj.timestamp = Date.now();\n                            device.lastValues[category].push(obj);\n                        }\n\n                        //TODO: Dimmer and color-unit can't parse. Empty!\n                        device.save((error) => {\n                            if (error) {\n                                reject(error);\n                            }\n                            else {\n                                resolve();\n                            }\n                        })\n                    }\n                }\n            });\n        });\n    }\n\n    _setNestedValue(obj, keystr, value) {\n        var dest = obj;\n        keystr.split(\".\").forEach((key) => {\n            if (!dest.hasOwnProperty(key)) {\n                dest[key] = {};\n            }\n            dest = dest[key];\n        });\n        dest = value;\n        return obj;\n    }\n\n\n    getObject(objName, type) {\n        return new Promise((resolve, reject) => {\n            if (typeof objName === \"undefined\" || typeof type === \"undefined\") {\n                reject(new Error(\"Database.getObject(): Invalid parameters!\"));\n            }\n            else {\n                var model = {};\n                switch (type) {\n                    case \"device\":\n                        model = Device.model;\n                        break;\n                    case \"room\":\n                        model = Room.model;\n                        break;\n                    default:\n                        reject(new Error(\"Invalid type\"));\n                        break;\n                }\n\n                var query = model.findOne({name: objName});\n\n                if (type === \"room\") { //Check if we need to populate\n                    query.populate(\"devices\");\n                }\n\n                query.exec((error, result) => {\n                    if (error) {\n                        reject(error);\n                    }\n                    resolve(result);\n                });\n            }\n        });\n    }\n}\n\nexport default Database;"]}