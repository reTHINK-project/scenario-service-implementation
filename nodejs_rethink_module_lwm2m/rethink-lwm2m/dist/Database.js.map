{
  "version": 3,
  "sources": [
    "../src/Database.js"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IASM,Q;AAEF,sBAAY,MAAZ,EAAoB;AAAA;;AAChB,aAAK,OAAL,GAAe,MAAf;AACA,aAAK,eAAL,GAAuB,IAAvB;AACH;;;;kCAcS;AACN,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,oBAAI,KAAK,SAAL,EAAJ,EAAsB;AAClB,2BAAO,IAAI,KAAJ,CAAU,0CAAV,CAAP;AACH,iBAFD,MAGK;AACD,yBAAK,KAAL,GAAa,IAAb,CAAkB,OAAlB;AACH;AACJ,aAPM,CAAP;AAQH;;;gCAEO;AACJ,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC5B,qBAAK,WAAL,GAAmB,mBAAS,gBAAT,CAA0B,KAAK,MAAL,CAAY,EAAZ,CAAe,IAAzC,EAA+C,KAAK,MAAL,CAAY,EAAZ,CAAe,QAA9D,CAAnB;AACA,qBAAK,UAAL,CAAgB,EAAhB,CAAmB,OAAnB,EAA4B,SAAS,mBAAT,CAA6B,KAA7B,EAAoC;AAC5D,qCAAO,KAAP,CAAa,4CAAb,EAA2D,KAA3D;AACA,0BAAM,IAAI,KAAJ,CAAU,KAAV,CAAN;AACH,iBAHD;AAIA,qBAAK,UAAL,CAAgB,IAAhB,CAAqB,MAArB,EAA6B,YAAM;AAC/B,qCAAO,KAAP,CAAa,oCAAb;AACA,qCAAO,IAAP,CAAY,KAAK,UAAjB;AACA,mCAAK,IAAL,CAAU,KAAK,UAAf;AACA;AACH,iBALD;AAMH,aAZM,CAAP;AAaH;;;qCAEY;AACT,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,oBAAI,KAAK,SAAL,EAAJ,EAAsB;AAClB,yBAAK,UAAL,CAAgB,KAAhB,CAAsB,YAAM;AACxB;AACH,qBAFD;AAGH,iBAJD,MAKK;AACD,2BAAO,IAAI,KAAJ,CAAU,2CAAV,CAAP;AACH;AACJ,aATM,CAAP;AAUH;;;oCAEW;AACR,gBAAI,OAAO,KAAK,UAAZ,KAA2B,WAA/B,EAA4C;AACxC,uBAAO,KAAK,UAAL,CAAgB,UAAhB,KAA+B,CAA/B,IAAoC,KAAK,UAAL,CAAgB,UAAhB,KAA+B,CAA1E;AACH,aAFD,MAGK;AACD,uBAAO,KAAP;AACH;AACJ;;;wCAEe;AACZ,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,oBAAI,CAAC,KAAK,SAAL,EAAL,EAAuB;AACnB,2BAAO,IAAI,KAAJ,CAAU,sBAAV,CAAP;AACH,iBAFD,MAGK;AACD,yBAAK,UAAL,CAAgB,EAAhB,CAAmB,eAAnB,CAAmC,EAAC,MAAM,OAAP,EAAnC,C;AAAA,qBACK,IADL,CACU,UAAC,GAAD,EAAM,QAAN,EAAmB;AACrB,4BAAI,GAAJ,EAAS;AACL,mCAAO,GAAP;AACH,yBAFD,MAGK;AACD,oCAAQ,OAAO,QAAP,KAAoB,WAApB,IAAmC,aAAa,IAAxD;AACH;AACJ,qBARL;AASH;AACJ,aAfM,CAAP;AAgBH;;;sCAGa;AACV,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,oBAAI,OAAO,KAAK,MAAZ,KAAuB,WAA3B,EAAwC;AACpC,2BAAO,IAAI,KAAJ,CAAU,iBAAV,CAAP;AACH,iBAFD,MAGK;AACD,wBAAI,CAAC,KAAK,SAAL,EAAL,EAAuB;AACnB,+BAAO,IAAI,KAAJ,CAAU,uCAAV,CAAP;AACH,qBAFD,MAGK;AACD,4BAAI,SAAS,EAAb;;AAEA,6BAAK,WAAL,CAAiB,MAAjB,EACK,IADL,CACU,UAAC,MAAD,EAAY;AACd,mCAAO,KAAK,aAAL,CAAmB,MAAnB,CAAP;AACH,yBAHL,EAIK,IAJL,CAIU,UAAC,MAAD,EAAY;AACd,mCAAO,KAAK,cAAL,CAAoB,MAApB,CAAP;AACH,yBANL,EAOK,IAPL,CAOU,UAAC,MAAD,EAAY;AACd,gCAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACrB,yCAAS,IAAT;AACH;AACD,oCAAQ,MAAR;AACH,yBAZL;AAaH;AACJ;AACJ,aA1BM,CAAP;AA2BH;;;oCAEW,M,EAAQ;AAChB,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC5B,oBAAI,CAAC,KAAK,MAAL,CAAY,KAAZ,CAAkB,cAAlB,CAAiC,OAAjC,CAAL,EAAgD;AAC5C,4BAAQ,MAAR;AACH,iBAFD,MAGK;AACD,qCAAO,KAAP,CAAa,kCAAb;;AAEA,oCAAM,IAAN,CAAW,KAAK,MAAL,CAAY,KAAZ,CAAkB,KAA7B,EAAoC,UAAC,QAAD,EAAW,SAAX,EAAyB;AACrD,4BAAI,OAAO,eAAK,KAAL,EAAX;AACA,6BAAK,IAAL,GAAY,SAAS,IAArB;AACA,6BAAK,QAAL,GAAgB,SAAS,QAAzB;AACA,6BAAK,OAAL,GAAe,SAAS,OAAxB;AACA,6BAAK,IAAL,CAAU,UAAC,KAAD,EAAW;AACjB,gCAAI,KAAJ,EAAW;AACP,uCAAO,IAAP,CAAY,KAAZ;AACH;AACD,6CAAO,KAAP,CAAa,iBAAb,EAAgC,SAAS,IAAzC;AACA;AACH,yBAND;AAQH,qBAbL,EAcI,YAAM;AACF,gCAAQ,MAAR;AACH,qBAhBL;AAkBH;AACJ,aA1BM,CAAP;AA2BH;;;sCAEa,M,EAAQ;AAClB,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC5B,oBAAI,CAAC,KAAK,MAAL,CAAY,KAAZ,CAAkB,cAAlB,CAAiC,SAAjC,CAAL,EAAkD;AAC9C,4BAAQ,MAAR;AACH,iBAFD,MAGK;AACD,qCAAO,KAAP,CAAa,oCAAb;;AAEA,oCAAM,IAAN,CAAW,KAAK,MAAL,CAAY,KAAZ,CAAkB,OAA7B,EAAsC,UAAC,UAAD,EAAa,SAAb,EAA2B;AAC7D,4BAAI,SAAS,iBAAO,KAAP,EAAb;AACA,+BAAO,IAAP,GAAc,WAAW,IAAzB;AACA,+BAAO,IAAP,CAAY,UAAC,KAAD,EAAW;AACnB,gCAAI,KAAJ,EAAW;AACP,uCAAO,IAAP,CAAY,KAAZ;AACH;AACD,6CAAO,KAAP,CAAa,mBAAb,EAAkC,WAAW,IAA7C;AACA;AACH,yBAND;AAOH,qBAVD,EAUG,YAAM;AACL,gCAAQ,MAAR;AACH,qBAZD;AAaH;AACJ,aArBM,CAAP;AAuBH;;;uCAEc,M,EAAQ;AACnB,gBAAI,OAAO,IAAX;AACA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC5B,iCAAO,KAAP,CAAa,4BAAb;AACA,gCAAM,IAAN,CAAW,KAAK,MAAL,CAAY,KAAZ,CAAkB,OAA7B,EAAsC,UAAC,UAAD,EAAa,QAAb,EAA0B;AAC5D,wBAAI,CAAC,WAAW,cAAX,CAA0B,MAA1B,CAAL,EAAwC;AACpC,yCAAO,KAAP,CAAa,gDAAb,EAA+D,WAAW,IAA1E;AACA,+BAAO,UAAP;AACH;AACD,mCAAK,KAAL,CAAW,OAAX,CAAmB,EAAC,MAAM,WAAW,IAAlB,EAAnB,EAA4C,UAAC,KAAD,EAAQ,IAAR,EAAiB;AACzD,4BAAI,KAAJ,EAAW;AACP,mCAAO,IAAP,CAAY,IAAI,KAAJ,CAAU,yBAAV,EAAqC,KAArC,CAAZ;AACA,mCAAO,UAAP;AACH,yBAHD,MAIK;AACD,gCAAI,CAAC,IAAL,EAAW;AACP,uCAAO,IAAP,CAAY,IAAI,KAAJ,CAAU,wBAAwB,WAAW,IAAnC,GAA0C,GAA1C,GAAgD,WAAW,IAA3D,GAAkE,WAAlE,GAAgF,WAAW,IAA3F,GAAkG,cAA5G,CAAZ;AACA,uCAAO,UAAP;AACH;AACJ;AACD,yCAAO,KAAP,CAAa,OAAb,CAAqB,EAAC,MAAM,WAAW,IAAlB,EAArB,EAA8C,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAC7D,gCAAI,KAAJ,EAAW;AACP,uCAAO,IAAP,CAAY,IAAI,KAAJ,CAAU,yBAAV,EAAqC,KAArC,CAAZ;AACA,uCAAO,UAAP;AACH;AACD,gCAAI,CAAC,MAAL,EAAa;AACT,uCAAO,IAAP,CAAY,IAAI,KAAJ,CAAU,kCAAkC,WAAW,IAA7C,GAAoD,mBAA9D,CAAZ;AACA,uCAAO,UAAP;AACH;;AAED,mCAAO,IAAP,GAAc,IAAd;AACA,iCAAK,OAAL,CAAa,IAAb,CAAkB,MAAlB;;AAEA,mCAAO,IAAP,CAAY,UAAC,KAAD,EAAW;AACnB,oCAAI,KAAJ,EAAW;AACP,2CAAO,IAAP,CAAY,KAAZ;AACA,2CAAO,UAAP;AACH;AACD,qCAAK,IAAL,CAAU,UAAC,KAAD,EAAW;AACjB,wCAAI,KAAJ,EAAW;AACP,+CAAO,IAAP,CAAY,KAAZ;AACA,+CAAO,UAAP;AACH;AACD,qDAAO,KAAP,CAAa,iCAAb,EAAgD,OAAO,IAAvD,EAA6D,KAAK,IAAlE;AACA;AACH,iCAPD;AAQH,6BAbD;AAcH,yBA3BD;AA4BH,qBAvCD;AAwCH,iBA7CD,EA6CG,YAAM;AACL,4BAAQ,MAAR;AACH,iBA/CD;AAgDH,aAlDM,CAAP;AAmDH;;;;;;;;uCAMc,U,EAAY,Q,EAAU,O,EAAS;AAC1C,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,oBAAI,OAAO,QAAP,KAAoB,SAAxB,EAAmC;AAC/B,2BAAO,IAAI,KAAJ,CAAU,4CAAV,CAAP;AACH;AACD,iCAAO,KAAP,CAAa,OAAb,CAAqB,EAAC,MAAM,UAAP,EAArB,EAAyC,UAAC,KAAD,EAAQ,MAAR,EAAmB;;AACxD,wBAAI,KAAJ,EAAW;AACP,+BAAO,KAAP;AACH,qBAFD,MAGK;AACD,4BAAI,CAAC,MAAL,EAAa;AACT,6CAAO,KAAP,CAAa,yCAAb;;AAEA,qCAAS,iBAAO,KAAP,EAAT;AACA,mCAAO,IAAP,GAAc,UAAd;AACH;;AAED,+BAAO,YAAP,CAAoB,UAApB,GAAiC,QAAjC;AACA,4BAAI,QAAJ,EAAc,OAAO,YAAP,CAAoB,SAApB,GAAgC,KAAK,GAAL,EAAhC;;;AAGd,4BAAI,aAAa,IAAjB,EAAuB;AACnB,gCAAI,OAAO,OAAP,KAAmB,WAAnB,IAAkC,YAAY,IAAlD,EACI,OAAO,YAAP,CAAoB,OAApB,GAA8B,OAA9B;AACP,yBAHD,MAIK;AACD,mCAAO,YAAP,CAAoB,OAApB,GAA8B,IAA9B;AACH;;AAED,+BAAO,IAAP,CAAY,UAAC,KAAD,EAAW;AACnB,gCAAI,KAAJ,EAAW;AACP,uCAAO,KAAP;AACH;AACD;AACH,yBALD;AAMH;AACJ,iBA/BD;AAgCH,aApCM,CAAP;AAqCH;;;;;;mCAGU,U,EAAY,U,EAAY,Q,EAAU,U,EAAY,K,EAAO;AAC5D,gBAAI,OAAO,IAAX;AACA,gBAAI,KAAK,eAAL,KAAyB,IAA7B,EAAmC;AAC/B,qBAAK,eAAL,GAAuB,KAAK,iBAAL,CAAuB,UAAvB,EAAmC,UAAnC,EAA+C,QAA/C,EAAyD,UAAzD,EAAqE,KAArE,CAAvB;AACA,uBAAO,KAAK,eAAZ;AACH,aAHD,MAIK;AACD,qBAAK,eAAL,GAAuB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpD,yBAAK,eAAL,CACK,KADL,CACW,MADX,EAEK,IAFL,CAEU,YAAM;AACR,6BAAK,iBAAL,CAAuB,UAAvB,EAAmC,UAAnC,EAA+C,QAA/C,EAAyD,UAAzD,EAAqE,KAArE,EACK,KADL,CACW,MADX,EAEK,IAFL,CAEU,YAAM;AACR;AACH,yBAJL;AAKH,qBARL;AASH,iBAVsB,CAAvB;AAWA,uBAAO,KAAK,eAAZ;AACH;AACJ;;;0CAEiB,U,EAAY,U,EAAY,Q,EAAU,U,EAAY,K,EAAO;AACnE,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,iCAAO,KAAP,CAAa,OAAb,CAAqB,EAAC,MAAM,UAAP,EAArB,EAAyC,UAAC,KAAD,EAAQ,MAAR,EAAmB;AACxD,wBAAI,KAAJ,EAAW;AACP,+BAAO,KAAP;AACH,qBAFD,MAGK;AACD,4BAAI,CAAC,MAAL,EAAa;AACT,mCAAO,IAAI,KAAJ,CAAU,yCAAyC,UAAzC,GAAsD,sBAAhE,CAAP;AACH,yBAFD,MAGK;AACD,gCAAI,QAAJ;AACA,gCAAI,QAAJ;;AAEA,gCAAI,OAAO,uBAAQ,WAAR,CAAoB,UAApB,EAAgC,UAAhC,CAAX;AACA,gCAAI,SAAS,IAAb,EAAmB;AACf,2CAAW,MAAX;AACA,2CAAW,OAAX;AACH,6BAHD,MAIK;AACD,2CAAW,KAAK,UAAhB;AACA,2CAAW,KAAK,YAAhB;;AAEA,oCAAK,CAAC,aAAa,aAAb,IAA8B,aAAa,UAA5C,KAA4D,aAAa,OAA1E,IACG,aAAa,OAAb,IAAwB,aAAa,QAD5C,EAEE;AACE,4CAAQ,WAAW,KAAX,CAAR;AACH,iCAJD,MAKK;AACD,wCAAI,aAAa,OAAb,IAAwB,aAAa,aAAzC,EAAwD;AACpD,4CAAI;AACA,oDAAQ,KAAK,KAAL,CAAW,KAAX,CAAR;AACH,yCAFD,CAGA,OAAO,KAAP,EAAc;AACV,6DAAO,KAAP,CAAa,iCAAb,EAAgD,KAAhD;AACH;AACJ;AACJ;AACJ;;AAED,6CAAO,KAAP,CAAa,gBAAb,EAA+B,UAA/B,EAA2C,UAA3C,EAAuD,QAAvD,EAAiE,UAAjE,EAA6E,KAA7E;;AAEA,gCAAI,QAAQ,KAAZ;AACA,mCAAO,UAAP,CAAkB,QAAlB,EAA4B,OAA5B,CAAoC,UAAC,KAAD,EAAW;AAC3C,oCAAI,MAAM,EAAN,KAAa,SAAS,QAAT,CAAjB,EAAqC;AACjC,mDAAK,cAAL,CAAoB,KAApB,EAA2B,QAA3B,EAAqC,KAArC;AACA,wCAAI,aAAa,MAAjB,EAAyB;AACrB,8CAAM,GAAN,GAAY,MAAM,UAAN,GAAmB,GAAnB,GAAyB,QAAzB,GAAoC,GAApC,GAA0C,UAAtD;AACH;AACD,0CAAM,SAAN,GAAkB,KAAK,GAAL,EAAlB;AACA,4CAAQ,IAAR;AACH;AACJ,6BATD;;AAWA,gCAAI,CAAC,KAAL,EAAY;AACR,oCAAI,MAAM,EAAV;AACA,+CAAK,cAAL,CAAoB,GAApB,EAAyB,QAAzB,EAAmC,KAAnC;AACA,oCAAI,aAAa,MAAjB,EAAyB;AACrB,wCAAI,GAAJ,GAAU,MAAM,UAAN,GAAmB,GAAnB,GAAyB,QAAzB,GAAoC,GAApC,GAA0C,UAApD;AACH;AACD,oCAAI,EAAJ,GAAS,QAAT;AACA,oCAAI,SAAJ,GAAgB,KAAK,GAAL,EAAhB;AACA,uCAAO,UAAP,CAAkB,QAAlB,EAA4B,IAA5B,CAAiC,GAAjC;AACH;;AAED,mCAAO,IAAP,CAAY,UAAC,KAAD,EAAW;AACnB,oCAAI,KAAJ,EAAW;AACP,2CAAO,KAAP;AACH,iCAFD,MAGK;AACD;AACH;AACJ,6BAPD;AAQH;AACJ;AACJ,iBAzED;AA0EH,aA3EM,CAAP;AA4EH;;;kCAES,I,EAAM,O,EAAS;AACrB,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,oBAAI,OAAO,IAAP,KAAgB,WAApB,EAAiC;AAC7B,2BAAO,IAAI,KAAJ,CAAU,2CAAV,CAAP;AACH,iBAFD,MAGK;AACD,wBAAI,QAAQ,EAAZ;AACA,4BAAQ,IAAR;AACI,6BAAK,QAAL;AACI,oCAAQ,iBAAO,KAAf;AACA;AACJ,6BAAK,MAAL;AACI,oCAAQ,eAAK,KAAb;AACA;AACJ;AACI,mCAAO,IAAI,KAAJ,CAAU,cAAV,CAAP;AACA;AATR;AAWA,wBAAI,KAAJ;AACA,wBAAI,OAAO,OAAP,KAAmB,WAAnB,IAAkC,YAAY,IAAlD,EAAwD;AACpD,gCAAQ,MAAM,IAAN,EAAR;AACH,qBAFD,MAGK;AACD,gCAAQ,MAAM,OAAN,CAAc,EAAC,MAAM,OAAP,EAAd,CAAR;AACH;AACD,wBAAI,SAAS,MAAb,EAAqB;;AACjB,8BAAM,QAAN,CAAe,SAAf;AACH;AACD,0BAAM,IAAN,CAAW,UAAC,KAAD,EAAQ,MAAR,EAAmB;AAC1B,4BAAI,KAAJ,EAAW;AACP,mCAAO,KAAP;AACH;AACD,gCAAQ,MAAR;AACH,qBALD;AAMH;AACJ,aAlCM,CAAP;AAmCH;;;0BA3ZU,M,EAAQ;AACf,iBAAK,OAAL,GAAe,MAAf;AACH,S;4BAEY;AACT,mBAAO,KAAK,OAAZ;AACH;;;4BAEgB;AACb,mBAAO,KAAK,WAAZ;AACH;;;;;;kBAoZU,Q",
  "file": "Database.js",
  "sourcesContent": [
    "/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport mongoose from \"mongoose\";\nimport Room from \"./models/Room\";\nimport Device from \"./models/Device\";\nimport async from \"async\";\nimport logger from \"logops\";\nimport util from \"./Util\";\nimport mapping from \"./lwm2m-mapping\";\n\nclass Database {\n\n    constructor(config) {\n        this._config = config;\n        this._lastStoreValue = null;\n    }\n\n    set config(config) {\n        this._config = config;\n    }\n\n    get config() {\n        return this._config;\n    }\n\n    get connection() {\n        return this._connection;\n    }\n\n    connect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                reject(new Error(\"Already connected or connection pending!\"));\n            }\n            else {\n                that._init().then(resolve);\n            }\n        });\n    }\n\n    _init() {\n        var that = this;\n        return new Promise((resolve) => {\n            that._connection = mongoose.createConnection(that.config.db.host, that.config.db.database);\n            that.connection.on('error', function mongodbErrorHandler(error) {\n                logger.fatal('Could not establish connection to mongodb!', error);\n                throw new Error(error);\n            });\n            that.connection.once('open', () => {\n                logger.debug('Database.js: connected to mongodb!');\n                Device.load(that.connection);\n                Room.load(that.connection);\n                resolve();\n            });\n        });\n    }\n\n    disconnect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                that.connection.close(() => {\n                    resolve();\n                })\n            }\n            else {\n                reject(new Error(\"Can't close db-connection: Not connected!\"));\n            }\n        });\n    }\n\n    connected() {\n        if (typeof this.connection !== 'undefined') {\n            return this.connection.readyState === 1 || this.connection.readyState === 2;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isInitialised() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (!that.connected()) {\n                reject(new Error(\"Not connected to db!\"));\n            }\n            else {\n                that.connection.db.listCollections({name: 'rooms'}) //appended 's' is mongoose-behavior, see: http://bit.ly/1Lq65AJ)\n                    .next((err, collinfo) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            resolve(typeof collinfo !== 'undefined' && collinfo !== null);\n                        }\n                    });\n            }\n        });\n    }\n\n\n    createHotel() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (typeof that.config === 'undefined') {\n                reject(new Error(\"Missing config!\"));\n            }\n            else {\n                if (!that.connected()) {\n                    reject(new Error(\"Can't save data to db! Not connected!\"));\n                }\n                else {\n                    var errors = [];\n\n                    that._parseRooms(errors)\n                        .then((errors) => {\n                            return that._parseDevices(errors);\n                        })\n                        .then((errors) => {\n                            return that._setReferences(errors);\n                        })\n                        .then((errors) => {\n                            if (errors.length === 0) {\n                                errors = null;\n                            }\n                            resolve(errors);\n                        });\n                }\n            }\n        });\n    }\n\n    _parseRooms(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('rooms')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Room-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.rooms, (cfg_room, callback2) => {\n                        var room = Room.model();\n                        room.name = cfg_room.name;\n                        room.isBooked = cfg_room.isBooked;\n                        room.members = cfg_room.members;\n                        room.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                            }\n                            logger.debug(\"Added room '%s'\", cfg_room.name);\n                            callback2();\n                        });\n\n                    },\n                    () => {\n                        resolve(errors);\n                    }\n                );\n            }\n        });\n    }\n\n    _parseDevices(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('devices')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Device-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.devices, (cfg_device, callback2) => {\n                    var device = Device.model();\n                    device.name = cfg_device.name;\n                    device.save((error) => {\n                        if (error) {\n                            errors.push(error);\n                        }\n                        logger.debug(\"Added device '%s'\", cfg_device.name);\n                        callback2();\n                    });\n                }, () => {\n                    resolve(errors);\n                });\n            }\n        });\n\n    }\n\n    _setReferences(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            logger.debug(\"Establishing db-references\");\n            async.each(that.config.hotel.devices, (cfg_device, callback) => {\n                if (!cfg_device.hasOwnProperty('room')) {\n                    logger.debug(\"Device '%s' has no room-reference. Skipping...\", cfg_device.name);\n                    return callback();\n                }\n                Room.model.findOne({name: cfg_device.room}, (error, room) => {\n                    if (error) {\n                        errors.push(new Error(\"Error while querying db\", error));\n                        return callback();\n                    }\n                    else {\n                        if (!room) {\n                            errors.push(new Error(\"Invalid reference '\" + cfg_device.name + \".\" + cfg_device.room + \"'! Room '\" + cfg_device.room + \"' not found.\"));\n                            return callback();\n                        }\n                    }\n                    Device.model.findOne({name: cfg_device.name}, (error, device) => {\n                        if (error) {\n                            errors.push(new Error(\"Error while querying db\", error));\n                            return callback();\n                        }\n                        if (!device) {\n                            errors.push(new Error(\"Can't set reference, device '\" + cfg_device.name + \"' not found in db\"));\n                            return callback();\n                        }\n                        //Bidirectional\n                        device.room = room;\n                        room.devices.push(device);\n\n                        device.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                                return callback();\n                            }\n                            room.save((error) => {\n                                if (error) {\n                                    errors.push(error);\n                                    return callback();\n                                }\n                                logger.debug(\"Linked device '%s' to room '%s'\", device.name, room.name);\n                                callback();\n                            })\n                        });\n                    });\n                });\n            }, () => {\n                resolve(errors);\n            });\n        });\n    }\n\n\n    /*\n     register type:Boolean - Register or de-register device\n     */\n    registerDevice(deviceName, register, payload) {\n        return new Promise((resolve, reject) => {\n            if (typeof register !== 'boolean') {\n                reject(new Error(\"Invalid param. register, boolean expected.\"));\n            }\n            Device.model.findOne({name: deviceName}, (error, device) => { //Get device by name\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        logger.debug(\"Device not existing in db, creating ...\");\n\n                        device = Device.model();\n                        device.name = deviceName;\n                    }\n\n                    device.registration.registered = register;\n                    if (register) device.registration.timestamp = Date.now();\n\n                    //Set / remove payload if given\n                    if (register === true) {\n                        if (typeof payload !== 'undefined' && payload !== null)\n                            device.registration.payload = payload;\n                    }\n                    else {\n                        device.registration.payload = null;\n                    }\n\n                    device.save((error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        resolve();\n                    });\n                }\n            });\n        });\n    }\n\n    //Wait for other queries to finish\n    storeValue(deviceName, objectType, objectId, resourceId, value) {\n        var that = this;\n        if (that._lastStoreValue === null) {\n            that._lastStoreValue = that._storeValueSynced(deviceName, objectType, objectId, resourceId, value);\n            return that._lastStoreValue;\n        }\n        else {\n            that._lastStoreValue = new Promise((resolve, reject) => {\n                that._lastStoreValue\n                    .catch(reject)\n                    .then(() => {\n                        that._storeValueSynced(deviceName, objectType, objectId, resourceId, value)\n                            .catch(reject)\n                            .then(() => {\n                                resolve();\n                            });\n                    });\n            });\n            return that._lastStoreValue;\n        }\n    }\n\n    _storeValueSynced(deviceName, objectType, objectId, resourceId, value) {\n        return new Promise((resolve, reject) => {\n            Device.model.findOne({name: deviceName}, (error, device) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        reject(new Error(\"Can't store value in db for device '\" + deviceName + \"'! Device not found!\"));\n                    }\n                    else {\n                        var category;\n                        var location;\n\n                        var attr = mapping.getAttrName(objectType, resourceId);\n                        if (attr === null) {\n                            category = \"misc\";\n                            location = \"value\";\n                        }\n                        else {\n                            category = attr.objectType;\n                            location = attr.resourceType;\n\n                            if (((category === \"temperature\" || category === \"humidity\" ) && location === \"value\")\n                                || category === \"light\" && location === \"dimmer\"\n                            ) {\n                                value = parseFloat(value);\n                            }\n                            else {\n                                if (category === \"light\" && location === \"color.value\") {\n                                    try {\n                                        value = JSON.parse(value);\n                                    }\n                                    catch (error) {\n                                        logger.error(\"Error while parsing color.value\", error);\n                                    }\n                                }\n                            }\n                        }\n\n                        logger.debug(\"FOUND OR NOT ?\", deviceName, objectType, objectId, resourceId, value);\n\n                        var found = false;\n                        device.lastValues[category].forEach((entry) => {\n                            if (entry.id === parseInt(objectId)) {\n                                util.setNestedValue(entry, location, value);\n                                if (location === \"misc\") {\n                                    entry.uri = '/' + objectType + '/' + objectId + '/' + resourceId;\n                                }\n                                entry.timestamp = Date.now();\n                                found = true;\n                            }\n                        });\n\n                        if (!found) {\n                            var obj = {};\n                            util.setNestedValue(obj, location, value);\n                            if (location === \"misc\") {\n                                obj.uri = '/' + objectType + '/' + objectId + '/' + resourceId;\n                            }\n                            obj.id = objectId;\n                            obj.timestamp = Date.now();\n                            device.lastValues[category].push(obj);\n                        }\n\n                        device.save((error) => {\n                            if (error) {\n                                reject(error);\n                            }\n                            else {\n                                resolve();\n                            }\n                        })\n                    }\n                }\n            });\n        });\n    }\n\n    getObject(type, objName) {\n        return new Promise((resolve, reject) => {\n            if (typeof type === \"undefined\") {\n                reject(new Error(\"Database.getObject(): Invalid parameters!\"));\n            }\n            else {\n                var model = {};\n                switch (type) {\n                    case \"device\":\n                        model = Device.model;\n                        break;\n                    case \"room\":\n                        model = Room.model;\n                        break;\n                    default:\n                        reject(new Error(\"Invalid type\"));\n                        break;\n                }\n                var query;\n                if (typeof objName === \"undefined\" || objName === null) {\n                    query = model.find();\n                }\n                else {\n                    query = model.findOne({name: objName});\n                }\n                if (type === \"room\") { //Check if we need to populate\n                    query.populate(\"devices\");\n                }\n                query.exec((error, result) => {\n                    if (error) {\n                        reject(error);\n                    }\n                    resolve(result);\n                });\n            }\n        });\n    }\n}\n\nexport default Database;"
  ]
}