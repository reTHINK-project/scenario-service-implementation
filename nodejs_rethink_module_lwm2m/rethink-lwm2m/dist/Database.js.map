{"version":3,"sources":["../src/Database.js"],"names":[],"mappings":"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","file":"Database.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport mongoose from \"mongoose\";\nimport Room from \"./models/Room\";\nimport Device from \"./models/Device\";\nimport async from \"async\";\nimport logger from \"logops\";\n\nclass Database {\n\n    constructor(config) {\n        this._config = config;\n    }\n\n    set config(config) {\n        this._config = config;\n    }\n\n    get config() {\n        return this._config;\n    }\n\n    get connection() {\n        return this._connection;\n    }\n\n    connect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                reject(new Error(\"Already connected or connection pending!\"));\n            }\n            else {\n                that._init().then(resolve);\n            }\n        });\n    }\n\n    _init() {\n        var that = this;\n        return new Promise((resolve) => {\n            that._connection = mongoose.createConnection(that.config.db.host, that.config.db.database);\n            that.connection.on('error', function mongodbErrorHandler(error) {\n                logger.fatal('Could not establish connection to mongodb!', error);\n                throw new Error(error);\n            });\n            that.connection.once('open', () => {\n                logger.debug('Database.js: connected to mongodb!');\n                Device.load(that.connection);\n                Room.load(that.connection);\n                resolve();\n            });\n        });\n    }\n\n    disconnect() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (that.connected()) {\n                that.connection.close(() => {\n                    resolve();\n                })\n            }\n            else {\n                reject(new Error(\"Can't close db-connection: Not connected!\"));\n            }\n        });\n    }\n\n    connected() {\n        if (typeof this.connection !== 'undefined') {\n            return this.connection.readyState === 1 || this.connection.readyState === 2;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isInitialised() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (!that.connected()) {\n                reject(new Error(\"Not connected to db!\"));\n            }\n            else {\n                that.connection.db.listCollections({name: 'rooms'}) //appended 's' is mongoose-behavior, see: http://bit.ly/1Lq65AJ)\n                    .next((err, collinfo) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        else {\n                            resolve(typeof collinfo !== 'undefined' && collinfo !== null);\n                        }\n                    });\n            }\n        });\n    }\n\n\n    createHotel() {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            if (typeof that.config === 'undefined') {\n                reject(new Error(\"Missing config!\"));\n            }\n            else {\n                if (!that.connected()) {\n                    reject(new Error(\"Can't save data to db! Not connected!\"));\n                }\n                else {\n                    var errors = [];\n\n                    that._parseRooms(errors)\n                        .then((errors) => {\n                            return that._parseDevices(errors);\n                        })\n                        .then((errors) => {\n                            return that._setReferences(errors);\n                        })\n                        .then((errors) => {\n                            if (errors.length === 0) {\n                                errors = null;\n                            }\n                            resolve(errors);\n                        });\n                }\n            }\n        });\n    }\n\n    _parseRooms(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('rooms')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Room-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.rooms, (cfg_room, callback2) => {\n                        var room = Room.model();\n                        room.name = cfg_room.name;\n                        room.isBooked = cfg_room.isBooked;\n                        room.members = cfg_room.members;\n                        room.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                            }\n                            logger.debug(\"Added room '%s'\", cfg_room.name);\n                            callback2();\n                        });\n\n                    },\n                    () => {\n                        resolve(errors);\n                    }\n                );\n            }\n        });\n    }\n\n    _parseDevices(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            if (!that.config.hotel.hasOwnProperty('devices')) {\n                resolve(errors);\n            }\n            else {\n                logger.debug(\"Device-cfg existing, adding to db.\");\n\n                async.each(that.config.hotel.devices, (cfg_device, callback2) => {\n                    var device = Device.model();\n                    device.name = cfg_device.name;\n                    device.save((error) => {\n                        if (error) {\n                            errors.push(error);\n                        }\n                        logger.debug(\"Added device '%s'\", cfg_device.name);\n                        callback2();\n                    });\n                }, () => {\n                    resolve(errors);\n                });\n            }\n        });\n\n    }\n\n    _setReferences(errors) {\n        var that = this;\n        return new Promise((resolve) => {\n            logger.debug(\"Establishing db-references\");\n            async.each(that.config.hotel.devices, (cfg_device, callback) => {\n                if (!cfg_device.hasOwnProperty('room')) {\n                    logger.debug(\"Device '%s' has no room-reference. Skipping...\", cfg_device.name);\n                    return callback();\n                }\n                Room.model.findOne({name: cfg_device.room}, (error, room) => {\n                    if (error) {\n                        errors.push(new Error(\"Error while querying db\", error));\n                        return callback();\n                    }\n                    else {\n                        if (!room) {\n                            errors.push(new Error(\"Invalid reference '\" + cfg_device.name + \".\" + cfg_device.room + \"'! Room '\" + cfg_device.room + \"' not found.\"));\n                            return callback();\n                        }\n                    }\n                    Device.model.findOne({name: cfg_device.name}, (error, device) => {\n                        if (error) {\n                            errors.push(new Error(\"Error while querying db\", error));\n                            return callback();\n                        }\n                        if (!device) {\n                            errors.push(new Error(\"Can't set reference, device '\" + cfg_device.name + \"' not found in db\"));\n                            return callback();\n                        }\n                        //Bidirectional\n                        device.room = room;\n                        room.devices.push(device);\n\n                        device.save((error) => {\n                            if (error) {\n                                errors.push(error);\n                                return callback();\n                            }\n                            room.save((error) => {\n                                if (error) {\n                                    errors.push(error);\n                                    return callback();\n                                }\n                                logger.debug(\"Linked device '%s' to room '%s'\", device.name, room.name);\n                                callback();\n                            })\n                        });\n                    });\n                });\n            }, () => {\n                resolve(errors);\n            });\n        });\n    }\n\n\n    /*\n     register type:Boolean - Register or de-register device\n     */\n    registerDevice(deviceName, register, payload) {\n        return new Promise((resolve, reject) => {\n            if (typeof register !== 'boolean') {\n                reject(new Error(\"Invalid param. register, boolean expected.\"));\n            }\n            Device.model.findOne({name: deviceName}, (error, device) => { //Get device by name\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        logger.debug(\"Device not existing in db, creating ...\");\n\n                        device = Device.model();\n                        device.name = deviceName;\n                    }\n\n                    device.registration.registered = register;\n                    if (register) device.registration.timestamp = Date.now();\n\n                    //Set / remove payload if given\n                    if (register === true) {\n                        if (typeof payload !== 'undefined' && payload !== null)\n                            device.registration.payload = payload;\n                    }\n                    else {\n                        device.registration.payload = null;\n                    }\n\n                    device.save((error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        resolve();\n                    });\n                }\n            });\n        });\n    }\n\n    storeValue(deviceName, objectType, objectId, resourceId, value) {\n        var that = this;\n        return new Promise((resolve, reject) => {\n            Device.model.findOne({name: deviceName}, (error, device) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    if (!device) {\n                        reject(new Error(\"Can't store value in db for device '\" + deviceName + \"'! Device not found!\"));\n                    }\n                    else {\n                        var category;\n                        var location;\n\n                        switch (objectType) {\n                            case 3303:\n                                category = \"temperature\";\n                                switch (resourceId) {\n                                    case 5700: //Temp value\n                                        location = \"value\";\n                                        value = parseFloat(value);\n                                        break;\n                                    case 5701: //Temp unit\n                                        location = \"unit\";\n                                        break;\n                                    default:\n                                        reject(new Error(\"Can't store value for '\" + deviceName + \"'! Temperature: Unknown resource-id.\"));\n                                        break;\n                                }\n                                break;\n                            case 3304:\n                                category = \"humidity\";\n                                switch (resourceId) {\n                                    case 5700: //humidity value\n                                        location = \"value\";\n                                        value = parseFloat(value);\n                                        break;\n                                    case 5701: //humidity unit\n                                        location = \"unit\";\n                                        break;\n                                    default:\n                                        reject(new Error(\"Can't store value for '\" + deviceName + \"'! Humidity: Unknown resource-id.\"));\n                                        break;\n                                }\n                                break;\n                            case 3311:\n                                category = \"light\";\n                                switch (resourceId) {\n                                    case 5850:\n                                        location = \"isOn\";\n                                        break;\n                                    case 5851:\n                                        location = \"dimmer\";\n                                        value = parseFloat(value);\n                                        break;\n                                    case 5706:\n                                        location = \"color.value\";\n                                        value = JSON.parse(value);\n                                        var x = value[0];\n                                        var y = value[1];\n                                        value = {};\n                                        value.x = x;\n                                        value.y = y;\n                                        break;\n                                    case 5701:\n                                        location = \"color.unit\";\n                                        break;\n                                    default:\n                                        reject(new Error(\"Can't store value for '\" + deviceName + \"'! Light: Unknown resource-id.\"));\n                                        break;\n                                }\n                                break;\n                            default:\n                                category = \"misc\";\n                                location = \"value\";\n                                break;\n                        }\n\n                        var found = false;\n                        device.lastValues[category].forEach((entry) => {\n                            if (entry.id == objectId) {\n                                that._setNestedValue(entry, location, value);\n                                if (location === \"misc\") {\n                                    entry.uri = '/' + objectType + '/' + objectId + '/' + resourceId;\n                                }\n                                entry.timestamp = Date.now();\n                                found = true;\n                            }\n                        });\n\n                        if (!found) {\n                            var obj = {};\n                            that._setNestedValue(obj, location, value);\n                            obj.id = objectId;\n                            obj.timestamp = Date.now();\n                            device.lastValues[category].push(obj);\n                        }\n\n                        device.save((error) => {\n                            if (error) {\n                                reject(error);\n                            }\n                            else {\n                                resolve();\n                            }\n                        })\n                    }\n                }\n            });\n        });\n    }\n\n    _setNestedValue(obj, keystr, value) {\n        var dest = obj;\n        var arr = keystr.split(\".\");\n        var i = 0;\n        for (; i < arr.length - 1; i++) {\n            if (!dest.hasOwnProperty(arr[i])) {\n                dest[arr[i]] = {};\n            }\n            dest = dest[arr[i]];\n        }\n        dest[arr[i]] = value;\n    }\n\n\n    getObject(objName, type) {\n        return new Promise((resolve, reject) => {\n            if (typeof objName === \"undefined\" || typeof type === \"undefined\") {\n                reject(new Error(\"Database.getObject(): Invalid parameters!\"));\n            }\n            else {\n                var model = {};\n                switch (type) {\n                    case \"device\":\n                        model = Device.model;\n                        break;\n                    case \"room\":\n                        model = Room.model;\n                        break;\n                    default:\n                        reject(new Error(\"Invalid type\"));\n                        break;\n                }\n\n                var query = model.findOne({name: objName});\n\n                if (type === \"room\") { //Check if we need to populate\n                    query.populate(\"devices\");\n                }\n\n                query.exec((error, result) => {\n                    if (error) {\n                        reject(error);\n                    }\n                    resolve(result);\n                });\n            }\n        });\n    }\n}\n\nexport default Database;"]}