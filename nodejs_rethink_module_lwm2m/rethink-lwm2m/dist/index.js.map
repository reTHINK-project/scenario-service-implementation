{"version":3,"sources":["../src/index.js"],"names":["lwm2m","server","serverInfo","config","database","httpInterface","format","formatters","dev","setConfig","c","logLevel","setLevel","getConfig","start","Promise","resolve","reject","error","initdb","catch","then","startm2m","initHTTP","connect","isInitialised","initialised","createHotel","errors","info","results","setHandlers","stop","close","debug","disconnect","registrationHandler","endpoint","lifetime","version","binding","payload","callback","registerDevice","tempObj","getAttrId","objectTypeId","observeDeviceData","resourceTypeId","humObj","lightIdsMatch","RegExp","lightIds","result","exec","push","lightObj","forEach","id","actObj","unregistrationHandler","device","name","observeHandler","value","objectType","objectId","resourceId","deviceId","getRegistry","get","storeValue","deviceName","getByName","observe","cancelObserver","setHandler","http","enabled","host","port","key","cert","open"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,QAAQ,EAAZ;AACAA,MAAMC,MAAN,GAAe,uBAASA,MAAxB,C,CAAgC;AAChCD,MAAME,UAAN,GAAmB,EAAnB;AACA,IAAIC,SAAS,EAAb;AACA,IAAIC,iBAAJ;AACA,IAAIC,sBAAJ;;AAEA,iBAAOC,MAAP,GAAgB,iBAAOC,UAAP,CAAkBC,GAAlC;;AAEAR,MAAMS,SAAN,GAAkB,UAACC,CAAD,EAAO;AACrBP,aAASO,CAAT;;AAEA,QAAIP,OAAOF,MAAP,CAAcU,QAAlB,EAA4B;AACxB,yBAAOC,QAAP,CAAgBT,OAAOF,MAAP,CAAcU,QAA9B;AACH;AACJ,CAND;;AAQAX,MAAMa,SAAN,GAAkB,YAAM;AACpB,WAAOV,MAAP;AACH,CAFD;;AAIAH,MAAMc,KAAN,GAAc,YAAM;AAChB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI,OAAOd,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,6BAAOe,KAAP,CAAa,wBAAb;AACAD;AACH;AACDE,iBACKC,KADL,CACWH,MADX,EAEKI,IAFL,CAEU,YAAM;AACR,mBAAOC,UAAP;AACH,SAJL,EAKKF,KALL,CAKWH,MALX,EAMKI,IANL,CAMU,YAAM;AACR,mBAAOE,UAAP;AACH,SARL,EASKH,KATL,CASWH,MATX,EAUKI,IAVL,CAUUL,OAVV;AAWH,KAhBM,CAAP;AAkBH,CAnBD;;AAqBA,SAASG,MAAT,GAAkB;AACd,WAAO,IAAIJ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCb,mBAAW,uBAAaD,MAAb,CAAX;AACAC,iBAASoB,OAAT,GACKJ,KADL,CACW,UAACF,KAAD,EAAW;AACd,6BAAOA,KAAP,CAAaA,KAAb;AACAD,mBAAOC,KAAP;AACH,SAJL,EAKKG,IALL,CAKU,YAAM;AACR,mBAAOjB,SAASqB,aAAT,EAAP;AACH,SAPL,EAQKL,KARL,CAQW,UAACF,KAAD,EAAW;AACd,6BAAOA,KAAP,CAAaA,KAAb;AACAD,mBAAOC,KAAP;AACH,SAXL,EAYKG,IAZL,CAYU,UAACK,WAAD,EAAiB;AACnB,gBAAI,CAACA,WAAL,EAAkB;AACdtB,yBAASuB,WAAT,GACKP,KADL,CACW,UAACF,KAAD,EAAW;AACd,qCAAOA,KAAP,CAAaA,KAAb;AACAD,2BAAOC,KAAP;AACH,iBAJL,EAKKG,IALL,CAKU,UAACO,MAAD,EAAY;AACd,wBAAIA,MAAJ,EAAY;AACR,yCAAOV,KAAP,CAAa,kCAAb,EAAiDU,MAAjD;AACH,qBAFD,MAGK;AACD,yCAAOC,IAAP,CAAY,wCAAZ;AACH;AACDb;AACH,iBAbL;AAcH,aAfD,MAgBK;AACD,iCAAOa,IAAP,CAAY,oDAAZ;AACAb;AACH;AACJ,SAjCL;AAkCH,KApCM,CAAP;AAqCH;;AAED,SAASM,QAAT,GAAoB;AAChB,WAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCjB,cAAMC,MAAN,CAAaa,KAAb,CAAmBX,OAAOF,MAA1B,EAAkC,UAACiB,KAAD,EAAQY,OAAR,EAAoB;AAClD,gBAAIZ,KAAJ,EAAW;AACP,iCAAOA,KAAP,CAAaA,KAAb;AACAD,uBAAOC,KAAP;AACH,aAHD,MAIK;AACDlB,sBAAME,UAAN,GAAmB4B,OAAnB;AACAC,8BAAcV,IAAd,CAAmBL,OAAnB;AACH;AACJ,SATD;AAUH,KAXM,CAAP;AAYH;;AAGDhB,MAAMgC,IAAN,GAAa,YAAM;AACf,WAAO,IAAIjB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI,CAACjB,MAAME,UAAX,EAAuB;AAAE;AACrBe,mBAAOC,KAAP;AACH;AACDb,sBAAc4B,KAAd,GACKb,KADL,CACW,UAACF,KAAD,EAAW;AACd,6BAAOA,KAAP,CAAa,oCAAb,EAAmDA,KAAnD;AACH,SAHL,EAIKG,IAJL,CAIU,YAAM;AACR,6BAAOa,KAAP,CAAa,uBAAb;AACH,SANL;AAOA9B,iBAAS+B,UAAT,GACKf,KADL,CACW,UAACF,KAAD,EAAW;AACd,6BAAOA,KAAP,CAAa,oCAAb,EAAmDA,KAAnD;AACH,SAHL,EAIKG,IAJL,CAIU,YAAM;AACR,6BAAOa,KAAP,CAAa,sBAAb;AACH,SANL;AAOAlC,cAAMC,MAAN,CAAa+B,IAAb,CAAkBhC,MAAME,UAAxB,EAAoC,UAACgB,KAAD,EAAW;AAAE;AAC7C,gBAAIA,KAAJ,EAAW;AACPD,uBAAOC,KAAP;AACH,aAFD,MAGK;AACD,iCAAOgB,KAAP,CAAa,eAAb;AACAlB;AACH;AACJ,SARD;AASH,KA3BM,CAAP;AA4BH,CA7BD;;AA+BA,SAASoB,mBAAT,CAA6BC,QAA7B,EAAuCC,QAAvC,EAAiDC,OAAjD,EAA0DC,OAA1D,EAAmEC,OAAnE,EAA4EC,QAA5E,EAAsF;AAClF,qBAAOb,IAAP,CAAY,wDAAZ;AACA,qBAAOA,IAAP,CAAY,4DAAZ,EAA0EQ,QAA1E,EAAoFC,QAApF,EAA8FE,OAA9F,EAAuGC,OAAvG;;AAEArC,aAASuC,cAAT,CAAwBN,QAAxB,EAAkC,IAAlC,EAAwCI,OAAxC,EACKrB,KADL,CACW,UAACF,KAAD,EAAW;AACd,yBAAOA,KAAP,CAAa,kCAAb,EAAiDA,KAAjD;AACH,KAHL,EAIKG,IAJL,CAIU,YAAM;AACR;;AAEA;AACA,YAAIuB,UAAU,uBAAQC,SAAR,CAAkB,aAAlB,EAAiCC,YAA/C;AACA,yBAAOZ,KAAP,CAAa,6BAAb,EAA4CU,OAA5C;AACAG,0BAAkBV,QAAlB,EAA4BO,OAA5B,EAAqC,CAArC,EAAwC,uBAAQC,SAAR,CAAkB,aAAlB,EAAiC,OAAjC,EAA0CG,cAAlF;AACAD,0BAAkBV,QAAlB,EAA4BO,OAA5B,EAAqC,CAArC,EAAwC,uBAAQC,SAAR,CAAkB,aAAlB,EAAiC,MAAjC,EAAyCG,cAAjF;;AAEA;AACA;AACA;;AAEA;AACA,YAAIC,SAAS,uBAAQJ,SAAR,CAAkB,UAAlB,EAA8BC,YAA3C;AACA,yBAAOZ,KAAP,CAAa,6BAAb,EAA4Ce,MAA5C;AACAF,0BAAkBV,QAAlB,EAA4BY,MAA5B,EAAoC,CAApC,EAAuC,uBAAQJ,SAAR,CAAkB,UAAlB,EAA8B,OAA9B,EAAuCG,cAA9E;AACAD,0BAAkBV,QAAlB,EAA4BY,MAA5B,EAAoC,CAApC,EAAuC,uBAAQJ,SAAR,CAAkB,UAAlB,EAA8B,MAA9B,EAAsCG,cAA7E;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAIE,gBAAgB,IAAIC,MAAJ,CAAW,sBAAX,EAAmC,GAAnC,CAApB;AACA,YAAIC,WAAW,EAAf;AACA,YAAIC,SAAS,IAAb;AACA,WAAG;AACCA,qBAASH,cAAcI,IAAd,CAAmBb,OAAnB,CAAT;AACA,gBAAIY,UAAU,IAAd,EAAoB;AAChBD,yBAASG,IAAT,CAAcF,OAAO,CAAP,CAAd;AACH;AACJ,SALD,QAMOA,UAAU,IANjB;AAOA,YAAIG,WAAW,uBAAQX,SAAR,CAAkB,OAAlB,EAA2BC,YAA1C;AACA,yBAAOZ,KAAP,CAAa,6BAAb,EAA4CsB,QAA5C;AACAJ,iBAASK,OAAT,CAAiB,UAACC,EAAD,EAAQ;AACrBX,8BAAkBV,QAAlB,EAA4BmB,QAA5B,EAAsCE,EAAtC,EAA0C,uBAAQb,SAAR,CAAkB,OAAlB,EAA2B,MAA3B,EAAmCG,cAA7E;AACAD,8BAAkBV,QAAlB,EAA4BmB,QAA5B,EAAsCE,EAAtC,EAA0C,uBAAQb,SAAR,CAAkB,OAAlB,EAA2B,MAA3B,EAAmCG,cAA7E;AACAD,8BAAkBV,QAAlB,EAA4BmB,QAA5B,EAAsCE,EAAtC,EAA0C,uBAAQb,SAAR,CAAkB,OAAlB,EAA2B,QAA3B,EAAqCG,cAA/E;AACAD,8BAAkBV,QAAlB,EAA4BmB,QAA5B,EAAsCE,EAAtC,EAA0C,uBAAQb,SAAR,CAAkB,OAAlB,EAA2B,aAA3B,EAA0CG,cAApF;AACAD,8BAAkBV,QAAlB,EAA4BmB,QAA5B,EAAsCE,EAAtC,EAA0C,uBAAQb,SAAR,CAAkB,OAAlB,EAA2B,YAA3B,EAAyCG,cAAnF;;AAEA;AACA;AACA;AACA;AACA;AACH,SAZD;;AAcA;AACA,YAAIW,SAAS,uBAAQd,SAAR,CAAkB,UAAlB,EAA8BC,YAA3C;AACAC,0BAAkBV,QAAlB,EAA4BsB,MAA5B,EAAoC,CAApC,EAAuC,uBAAQd,SAAR,CAAkB,UAAlB,EAA8B,MAA9B,EAAsCG,cAA7E;AACAD,0BAAkBV,QAAlB,EAA4BsB,MAA5B,EAAoC,CAApC,EAAuC,uBAAQd,SAAR,CAAkB,UAAlB,EAA8B,MAA9B,EAAsCG,cAA7E;AACAD,0BAAkBV,QAAlB,EAA4BsB,MAA5B,EAAoC,CAApC,EAAuC,uBAAQd,SAAR,CAAkB,UAAlB,EAA8B,iBAA9B,EAAiDG,cAAxF;;AAEAN;AACH,KA9DL;AA+DH;;AAED,SAASkB,qBAAT,CAA+BC,MAA/B,EAAuCnB,QAAvC,EAAiD;AAC7C,qBAAOb,IAAP,CAAY,0DAAZ;AACA,qBAAOA,IAAP,CAAY,qBAAZ,EAAmCgC,OAAOC,IAA1C;;AAEA1D,aAASuC,cAAT,CAAwBkB,OAAOC,IAA/B,EAAqC,KAArC,EACK1C,KADL,CACW,UAACF,KAAD,EAAW;AACd,yBAAOA,KAAP,CAAa,kCAAb,EAAiDA,KAAjD;AACH,KAHL,EAIKG,IAJL,CAIUqB,QAJV;AAKH;;AAGD,SAASqB,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,UAArD,EAAiEC,QAAjE,EAA2E;AACvEpE,UAAMC,MAAN,CAAaoE,WAAb,GAA2BC,GAA3B,CAA+BF,QAA/B,EAAyC,UAAClD,KAAD,EAAQ2C,MAAR,EAAmB;AACxD,YAAI3C,KAAJ,EAAW;AACP,6BAAOA,KAAP,CAAa,kCAAb,EAAiDA,KAAjD;AACH,SAFD,MAGK;AACDd,qBAASmE,UAAT,CAAoBV,OAAOC,IAA3B,EAAiCG,UAAjC,EAA6CC,QAA7C,EAAuDC,UAAvD,EAAmEH,KAAnE,EACK5C,KADL,CACW,UAACF,KAAD,EAAW;AACd,iCAAOA,KAAP,CAAa,oDAAb,EAAmE2C,OAAOC,IAA1E,EAAgF5C,KAAhF;AACH,aAHL,EAIKG,IAJL,CAIU,YAAM;AACR,iCAAOa,KAAP,CAAa,4CAAb,EAA2D2B,OAAOC,IAAlE;AACH,aANL;AAOH;AACJ,KAbD;AAcA,qBAAO5B,KAAP,CAAa,sCAAsCkC,QAAtC,GAAiD,eAAjD,GAAmEH,UAAnE,GAAgF,aAAhF,GAAgGC,QAAhG,GAA2G,gBAA3G,GAA8HC,UAA9H,GAA2I,OAA3I,GAAqJH,KAAlK;AACH;;AAED,SAASjB,iBAAT,CAA2ByB,UAA3B,EAAuCP,UAAvC,EAAmDC,QAAnD,EAA6DC,UAA7D,EAAyE;AACrE,qBAAOjC,KAAP,CAAa,4BAAb;AACA,qBAAOA,KAAP,CAAa,MAAb;AACAlC,UAAMC,MAAN,CAAaoE,WAAb,GAA2BI,SAA3B,CAAqCD,UAArC,EAAiD,UAACtD,KAAD,EAAQ2C,MAAR,EAAmB;AAChE,YAAI3C,KAAJ,EAAW;AACP,6BAAOA,KAAP,CAAaA,KAAb;AACH,SAFD,MAGK;AACDlB,kBAAMC,MAAN,CAAayE,OAAb,CAAqBb,OAAOH,EAA5B,EAAgCO,UAAhC,EAA4CC,QAA5C,EAAsDC,UAAtD,EAAkEJ,cAAlE,EAAkF,UAAC7C,KAAD,EAAQ8C,KAAR,EAAkB;AAChG,oBAAI9C,KAAJ,EAAW;AACP,qCAAOA,KAAP,CAAa,+BAAb,EAA8CA,KAA9C;AACH,iBAFD,MAGK;AACD,qCAAOgB,KAAP,CAAa,yCAAb,EAAwDsC,UAAxD,EAAoER,KAApE;AACA,wBAAIA,UAAU,EAAd,EAAkB;AAAE;AAChB,yCAAO9B,KAAP,CAAa,aAAasC,UAAb,GAA0B,kBAA1B,GAA+CP,UAA/C,GAA4D,GAA5D,GAAkEC,QAAlE,GAA6E,GAA7E,GAAmFC,UAAnF,GAAgG,sBAA7G;AACAnE,8BAAMC,MAAN,CAAa0E,cAAb,CAA4Bd,OAAOH,EAAnC,EAAuCO,UAAvC,EAAmDC,QAAnD,EAA6DC,UAA7D,EAAyE,YAAM;AAC3E,6CAAOjC,KAAP,CAAa,4BAAb,EAA2C2B,OAAOC,IAAlD;AACH,yBAFD;AAGH,qBALD,MAMK;AACD,yCAAO5B,KAAP,CAAa,gCAAgCsC,UAAhC,GAA6C,IAA7C,GAAoDP,UAApD,GAAiE,IAAjE,GAAwEC,QAAxE,GAAmF,IAAnF,GAA0FC,UAA1F,GAAuG,IAAvG,GAA8GH,KAA9G,GAAsH,GAAnI;AACA5D,iCAASmE,UAAT,CAAoBC,UAApB,EAAgCP,UAAhC,EAA4CC,QAA5C,EAAsDC,UAAtD,EAAkEH,KAAlE,EACK5C,KADL,CACW,UAACF,KAAD,EAAW;AACd,6CAAOA,KAAP,CAAa,wCAAb,EAAuDA,KAAvD;AACH,yBAHL,EAIKG,IAJL,CAIU,YAAM;AACR,6CAAOa,KAAP,CAAa,+BAA+BsC,UAA/B,GAA4C,IAA5C,GAAmDP,UAAnD,GAAgE,IAAhE,GAAuEC,QAAvE,GAAkF,IAAlF,GAAyFC,UAAzF,GAAsG,IAAtG,GAA6GH,KAA7G,GAAqH,GAAlI;AACH,yBANL;AAOH;AACJ;AACJ,aAvBD;AAwBH;AACJ,KA9BD;AAgCH;;AAED,SAASjC,WAAT,GAAuB;AACnB,WAAO,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BhB,cAAMC,MAAN,CAAa2E,UAAb,CAAwB5E,MAAME,UAA9B,EAA0C,cAA1C,EAA0DkC,mBAA1D;AACApC,cAAMC,MAAN,CAAa2E,UAAb,CAAwB5E,MAAME,UAA9B,EAA0C,gBAA1C,EAA4D0D,qBAA5D;AACA,yBAAO1B,KAAP,CAAa,4BAAb;AACAlB;AACH,KALM,CAAP;AAMH;;AAED,SAASO,QAAT,GAAoB;AAChB,WAAO,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAI,CAACd,OAAO0E,IAAP,CAAYC,OAAjB,EAA0B;AACtB,6BAAO5C,KAAP,CAAa,2BAAb;AACAlB;AACH,SAHD,MAIK;AACD,6BAAOkB,KAAP,CAAa,yBAAb;AACA7B,4BAAgB,4BAAkBF,OAAO0E,IAAP,CAAYE,IAA9B,EAAoC5E,OAAO0E,IAAP,CAAYG,IAAhD,EAAsD7E,OAAO0E,IAAP,CAAYI,GAAlE,EAAuE9E,OAAO0E,IAAP,CAAYK,IAAnF,EAAyF9E,QAAzF,EAAmGJ,KAAnG,CAAhB;AACAK,0BAAc8E,IAAd,GACK/D,KADL,CACW,iBAAS;AACZ,iCAAOF,KAAP,CAAa,qCAAb,EAAoDA,KAApD;AACAD,uBAAOC,KAAP;AACH,aAJL,EAKKG,IALL,CAKU,YAAM;AACR,iCAAOQ,IAAP,CAAY,wBAAZ;AACAb;AACH,aARL;AASH;AACJ,KAlBM,CAAP;AAmBH;;kBAEchB,K","file":"index.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\nimport logger from \"logops\";\nimport lwm2mlib from \"lwm2m-node-lib\";\nimport Database from \"./Database\";\nimport HTTPInterface from \"./HTTPInterface\";\nimport mapping from \"./lwm2m-mapping\";\n\nlet lwm2m = {};\nlwm2m.server = lwm2mlib.server; //Enables use of all native lwm2m-lib methods\nlwm2m.serverInfo = {};\nlet config = {};\nlet database;\nlet httpInterface;\n\nlogger.format = logger.formatters.dev;\n\nlwm2m.setConfig = (c) => {\n    config = c;\n\n    if (config.server.logLevel) {\n        logger.setLevel(config.server.logLevel);\n    }\n};\n\nlwm2m.getConfig = () => {\n    return config;\n};\n\nlwm2m.start = () => {\n    return new Promise((resolve, reject) => {\n        if (typeof config === 'undefined') {\n            logger.error(\"Missing configuration!\");\n            reject();\n        }\n        initdb()\n            .catch(reject)\n            .then(() => {\n                return startm2m();\n            })\n            .catch(reject)\n            .then(() => {\n                return initHTTP();\n            })\n            .catch(reject)\n            .then(resolve);\n    });\n\n};\n\nfunction initdb() {\n    return new Promise((resolve, reject) => {\n        database = new Database(config);\n        database.connect()\n            .catch((error) => {\n                logger.error(error);\n                reject(error);\n            })\n            .then(() => {\n                return database.isInitialised()\n            })\n            .catch((error) => {\n                logger.error(error);\n                reject(error);\n            })\n            .then((initialised) => {\n                if (!initialised) {\n                    database.createHotel()\n                        .catch((error) => {\n                            logger.error(error);\n                            reject(error);\n                        })\n                        .then((errors) => {\n                            if (errors) {\n                                logger.error(\"Problems while initialising db: \", errors);\n                            }\n                            else {\n                                logger.info(\"Database initialised with config-data!\");\n                            }\n                            resolve();\n                        });\n                }\n                else {\n                    logger.info(\"Database already initialised. Using existing data.\");\n                    resolve();\n                }\n            });\n    });\n}\n\nfunction startm2m() {\n    return new Promise((resolve, reject) => {\n        lwm2m.server.start(config.server, (error, results) => {\n            if (error) {\n                logger.error(error);\n                reject(error);\n            }\n            else {\n                lwm2m.serverInfo = results;\n                setHandlers().then(resolve);\n            }\n        });\n    });\n}\n\n\nlwm2m.stop = () => {\n    return new Promise((resolve, reject) => {\n        if (!lwm2m.serverInfo) { //If server not running, abort.\n            reject(error);\n        }\n        httpInterface.close()\n            .catch((error) => {\n                logger.error(\"Error while closing httpInterface!\", error);\n            })\n            .then(() => {\n                logger.debug(\"Closed http-interface\");\n            });\n        database.disconnect()\n            .catch((error) => {\n                logger.error(\"Error while disconnecting from db!\", error);\n            })\n            .then(() => {\n                logger.debug(\"Disconnected from db\");\n            });\n        lwm2m.server.stop(lwm2m.serverInfo, (error) => { //TODO: Observes somehow do not stop on lwm2m.server stop\n            if (error) {\n                reject(error);\n            }\n            else {\n                logger.debug(\"Stopped lwm2m\");\n                resolve();\n            }\n        });\n    });\n};\n\nfunction registrationHandler(endpoint, lifetime, version, binding, payload, callback) {\n    logger.info('\\nDevice registration:\\n----------------------------\\n');\n    logger.info('Endpoint name: %s\\nLifetime: %s\\nBinding: %s\\n Payload: %s', endpoint, lifetime, binding, payload);\n\n    database.registerDevice(endpoint, true, payload)\n        .catch((error) => {\n            logger.error(\"Error while updating device-data\", error);\n        })\n        .then(() => {\n            //TODO: Make list of objects/resources to observe configurable\n\n            //TEMPERATURE\n            let tempObj = mapping.getAttrId(\"temperature\").objectTypeId;\n            logger.debug(\"Got object for observe job:\", tempObj);\n            observeDeviceData(endpoint, tempObj, 0, mapping.getAttrId(\"temperature\", \"value\").resourceTypeId);\n            observeDeviceData(endpoint, tempObj, 0, mapping.getAttrId(\"temperature\", \"unit\").resourceTypeId);\n\n            //Old\n            //observeDeviceData(endpoint, 3303, 0, 5700); //Temperature\n            //observeDeviceData(endpoint, 3303, 0, 5701); //Unit\n\n            //HUMIDITY\n            let humObj = mapping.getAttrId(\"humidity\").objectTypeId;\n            logger.debug(\"Got object for observe job:\", humObj);\n            observeDeviceData(endpoint, humObj, 0, mapping.getAttrId(\"humidity\", \"value\").resourceTypeId);\n            observeDeviceData(endpoint, humObj, 0, mapping.getAttrId(\"humidity\", \"unit\").resourceTypeId);\n\n            //Old\n            //observeDeviceData(endpoint, 3304, 0, 5700); //Humidity\n            //observeDeviceData(endpoint, 3304, 0, 5701); //Unit\n\n            //LIGHT\n            //Get list of light-ids\n            var lightIdsMatch = new RegExp(\"<\\/3311[\\/]([0-9]+)>\", \"g\");\n            var lightIds = [];\n            var result = null;\n            do {\n                result = lightIdsMatch.exec(payload);\n                if (result != null) {\n                    lightIds.push(result[1]);\n                }\n            }\n            while (result != null);\n            let lightObj = mapping.getAttrId(\"light\").objectTypeId;\n            logger.debug(\"Got object for observe job:\", lightObj);\n            lightIds.forEach((id) => {\n                observeDeviceData(endpoint, lightObj, id, mapping.getAttrId(\"light\", \"name\").resourceTypeId);\n                observeDeviceData(endpoint, lightObj, id, mapping.getAttrId(\"light\", \"isOn\").resourceTypeId);\n                observeDeviceData(endpoint, lightObj, id, mapping.getAttrId(\"light\", \"dimmer\").resourceTypeId);\n                observeDeviceData(endpoint, lightObj, id, mapping.getAttrId(\"light\", \"color.value\").resourceTypeId);\n                observeDeviceData(endpoint, lightObj, id, mapping.getAttrId(\"light\", \"color.unit\").resourceTypeId);\n\n                //observeDeviceData(endpoint, 3311, id, 5801); //Light name\n                //observeDeviceData(endpoint, 3311, id, 5850); //Light on/off state\n                //observeDeviceData(endpoint, 3311, id, 5851); //Light dimmer\n                //observeDeviceData(endpoint, 3311, id, 5706); //Light color\n                //observeDeviceData(endpoint, 3311, id, 5701); //Light color unit\n            });\n\n            //LOCK or misc actuators\n            let actObj = mapping.getAttrId(\"actuator\").objectTypeId;\n            observeDeviceData(endpoint, actObj, 0, mapping.getAttrId(\"actuator\", \"isOn\").resourceTypeId);\n            observeDeviceData(endpoint, actObj, 0, mapping.getAttrId(\"actuator\", \"name\").resourceTypeId);\n            observeDeviceData(endpoint, actObj, 0, mapping.getAttrId(\"actuator\", \"applicationType\").resourceTypeId);\n\n            callback();\n        });\n}\n\nfunction unregistrationHandler(device, callback) {\n    logger.info('\\nDevice unregistration:\\n----------------------------\\n');\n    logger.info('Device location: %s', device.name);\n\n    database.registerDevice(device.name, false)\n        .catch((error) => {\n            logger.error(\"Error while updating device-data\", error);\n        })\n        .then(callback);\n}\n\n\nfunction observeHandler(value, objectType, objectId, resourceId, deviceId) {\n    lwm2m.server.getRegistry().get(deviceId, (error, device) => {\n        if (error) {\n            logger.error(\"Error while getting device by id\", error);\n        }\n        else {\n            database.storeValue(device.name, objectType, objectId, resourceId, value)\n                .catch((error) => {\n                    logger.error(\"Error while storing observe-data in db! Device: %s\", device.name, error);\n                })\n                .then(() => {\n                    logger.debug(\"Stored observe-data for device '%s' in db!\", device.name);\n                });\n        }\n    });\n    logger.debug(\"Observe-handler device [deviceId \" + deviceId + \", objectType \" + objectType + \", objectId \" + objectId + \", resourceId: \" + resourceId + \"] => \" + value);\n}\n\nfunction observeDeviceData(deviceName, objectType, objectId, resourceId) {\n    logger.debug(\"observeDeviceData(): start\")\n    logger.debug(\"test\");\n    lwm2m.server.getRegistry().getByName(deviceName, (error, device) => {\n        if (error) {\n            logger.error(error);\n        }\n        else {\n            lwm2m.server.observe(device.id, objectType, objectId, resourceId, observeHandler, (error, value) => {\n                if (error) {\n                    logger.error(\"Error while starting observe!\", error)\n                }\n                else {\n                    logger.debug(\"Started observe for '%s'. First value: \", deviceName, value);\n                    if (value === '') { //No data => Device does not set data\n                        logger.debug(\"Device '\" + deviceName + \"' does not set /\" + objectType + \"/\" + objectId + \"/\" + resourceId + \"! Canceling observe.\");\n                        lwm2m.server.cancelObserver(device.id, objectType, objectId, resourceId, () => {\n                            logger.debug(\"Observe for '%s' canceled!\", device.name);\n                        });\n                    }\n                    else {\n                        logger.debug(\"START: database.storeValue(\" + deviceName + \", \" + objectType + \", \" + objectId + \", \" + resourceId + \", \" + value + \")\");\n                        database.storeValue(deviceName, objectType, objectId, resourceId, value)\n                            .catch((error) => {\n                                logger.error(\"Error while storing initial read-data!\", error);\n                            })\n                            .then(() => {\n                                logger.debug(\"DONE: database.storeValue(\" + deviceName + \", \" + objectType + \", \" + objectId + \", \" + resourceId + \", \" + value + \")\");\n                            });\n                    }\n                }\n            });\n        }\n    });\n\n}\n\nfunction setHandlers() {\n    return new Promise((resolve) => {\n        lwm2m.server.setHandler(lwm2m.serverInfo, 'registration', registrationHandler);\n        lwm2m.server.setHandler(lwm2m.serverInfo, 'unregistration', unregistrationHandler);\n        logger.debug(\"Set registration handlers.\");\n        resolve();\n    });\n}\n\nfunction initHTTP() {\n    return new Promise((resolve, reject) => {\n        if (!config.http.enabled) {\n            logger.debug(\"httpInterface not enabled\");\n            resolve();\n        }\n        else {\n            logger.debug(\"Starting HTTP-interface\");\n            httpInterface = new HTTPInterface(config.http.host, config.http.port, config.http.key, config.http.cert, database, lwm2m);\n            httpInterface.open()\n                .catch(error => {\n                    logger.error(\"Error while starting HTTP-interface\", error);\n                    reject(error);\n                })\n                .then(() => {\n                    logger.info(\"Started HTTP-interface\");\n                    resolve();\n                });\n        }\n    });\n}\n\nexport default lwm2m;"]}